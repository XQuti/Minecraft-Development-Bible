{
  "version": 3,
  "sources": ["src/app/services/forum.service.spec.ts"],
  "sourcesContent": ["import { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { HttpHeaders } from '@angular/common/http';\nimport { ForumService } from './forum.service';\nimport { AuthService } from './auth.service';\nimport { ForumThread, ForumPost, CreateThreadRequest, CreatePostRequest } from '../models/forum.model';\nimport { User } from '../models/user.model';\n\ndescribe('ForumService', () => {\n  let service: ForumService;\n  let httpMock: HttpTestingController;\n  let mockAuthService: jasmine.SpyObj<AuthService>;\n  const baseUrl = 'http://localhost:8080/api/forums';\n\n  const mockUser: User = {\n    id: 1,\n    username: 'testuser',\n    email: 'test@example.com',\n    avatarUrl: undefined,\n    provider: 'local',\n    roles: ['USER']\n  };\n\n  beforeEach(async () => {\n    const authServiceSpy = jasmine.createSpyObj('AuthService', [\n      'getAuthenticatedHeaders',\n      'getToken',\n      'isAuthenticated'\n    ]);\n\n    await TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      providers: [\n        ForumService,\n        { provide: AuthService, useValue: authServiceSpy }\n      ]\n    }).compileComponents();\n    \n    service = TestBed.inject(ForumService);\n    httpMock = TestBed.inject(HttpTestingController);\n    mockAuthService = TestBed.inject(AuthService) as jasmine.SpyObj<AuthService>;\n    \n    // Setup default spy returns\n    mockAuthService.isAuthenticated.and.returnValue(true);\n    mockAuthService.getToken.and.returnValue('mock-token');\n    mockAuthService.getAuthenticatedHeaders.and.returnValue(new HttpHeaders({\n      'Authorization': 'Bearer mock-token',\n      'Content-Type': 'application/json'\n    }));\n  });\n\n  afterEach(() => {\n    // Verify that no unmatched requests are outstanding\n    if (httpMock) {\n      httpMock.verify();\n    }\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n\n  describe('getThreads', () => {\n    it('should fetch threads without category', () => {\n      const mockResponse = {\n        content: [\n          {\n            id: 1,\n            title: 'Test Thread',\n            author: mockUser,\n            isPinned: false,\n            isLocked: false,\n            postCount: 5,\n            lastActivity: '2024-01-01T00:00:00',\n            createdAt: '2024-01-01T00:00:00',\n            updatedAt: '2024-01-01T00:00:00'\n          }\n        ],\n        totalElements: 1,\n        totalPages: 1,\n        size: 20,\n        number: 0,\n        first: true,\n        last: true\n      };\n\n      service.getThreads(0, 20).subscribe(response => {\n        expect(response).toEqual(mockResponse);\n        expect(response.content.length).toBe(1);\n        expect(response.content[0].title).toBe('Test Thread');\n      });\n\n      const req = httpMock.expectOne(`${baseUrl}/threads?page=0&size=20`);\n      expect(req.request.method).toBe('GET');\n      req.flush(mockResponse);\n    });\n\n    it('should fetch threads with search query', () => {\n      const searchQuery = 'test search query';\n      const mockResponse = {\n        content: [],\n        totalElements: 0,\n        totalPages: 0,\n        size: 20,\n        number: 0,\n        first: true,\n        last: true\n      };\n\n      service.getThreads(0, 20, searchQuery).subscribe(response => {\n        expect(response).toEqual(mockResponse);\n      });\n\n      const req = httpMock.expectOne(`${baseUrl}/threads?page=0&size=20&search=${encodeURIComponent(searchQuery)}`);\n      expect(req.request.method).toBe('GET');\n      req.flush(mockResponse);\n    });\n\n    it('should handle error when fetching threads', () => {\n      service.getThreads(0, 20).subscribe({\n        next: () => fail('should have failed'),\n        error: (error) => {\n          expect(error.message).toBe('Could not load forum threads. Please try again later.');\n        }\n      });\n\n      // Expect original request\n      const req1 = httpMock.expectOne(`${baseUrl}/threads?page=0&size=20`);\n      req1.flush('Server Error', { status: 500, statusText: 'Internal Server Error' });\n      \n      // Expect retry request\n      const req2 = httpMock.expectOne(`${baseUrl}/threads?page=0&size=20`);\n      req2.flush('Server Error', { status: 500, statusText: 'Internal Server Error' });\n    });\n  });\n\n  describe('createThread', () => {\n    it('should create a new thread', () => {\n      const createRequest: CreateThreadRequest = {\n        title: 'New Thread',\n        content: 'Thread content'\n      };\n\n      const mockResponse: ForumThread = {\n        id: 1,\n        title: 'New Thread',\n        author: mockUser,\n        isPinned: false,\n        isLocked: false,\n        postCount: 1,\n        lastActivity: '2024-01-01T00:00:00',\n        createdAt: '2024-01-01T00:00:00',\n        updatedAt: '2024-01-01T00:00:00'\n      };\n\n      // Mock authentication\n      mockAuthService.getAuthenticatedHeaders.and.returnValue(\n        new HttpHeaders().set('Authorization', 'Bearer jwt-token')\n      );\n\n      service.createThread(createRequest).subscribe(response => {\n        expect(response).toEqual(mockResponse);\n        expect(response.title).toBe('New Thread');\n      });\n\n      const req = httpMock.expectOne(`${baseUrl}/threads`);\n      expect(req.request.method).toBe('POST');\n      expect(req.request.body).toEqual(createRequest);\n      req.flush(mockResponse);\n    });\n\n    it('should handle error when creating thread', () => {\n      const createRequest: CreateThreadRequest = {\n        title: '',\n        content: 'Thread content'\n      };\n\n      expect(() => {\n        service.createThread(createRequest);\n      }).toThrowError('Thread title is required');\n\n      // No HTTP request should be made for invalid input\n      httpMock.expectNone(`${baseUrl}/threads`);\n    });\n  });\n\n  describe('getThreadPosts', () => {\n    it('should fetch posts for a thread', () => {\n      const threadId = 1;\n      const mockThread: ForumThread = {\n        id: threadId,\n        title: 'Test Thread',\n        author: mockUser,\n        isPinned: false,\n        isLocked: false,\n        postCount: 2,\n        lastActivity: '2024-01-01T01:00:00',\n        createdAt: '2024-01-01T00:00:00'\n      };\n      \n      const mockPosts: ForumPost[] = [\n        {\n          id: 1,\n          content: 'First post',\n          author: mockUser,\n          thread: mockThread,\n          createdAt: '2024-01-01T00:00:00'\n        },\n        {\n          id: 2,\n          content: 'Second post',\n          author: { ...mockUser, id: 2, username: 'testuser2' },\n          thread: mockThread,\n          createdAt: '2024-01-01T01:00:00'\n        }\n      ];\n\n      const mockResponse = {\n        content: mockPosts,\n        totalElements: 2,\n        totalPages: 1,\n        size: 20,\n        number: 0,\n        first: true,\n        last: true\n      };\n\n      service.getThreadPosts(threadId).subscribe(response => {\n        expect(response).toEqual(mockResponse);\n        expect(response.content.length).toBe(2);\n        expect(response.content[0].content).toBe('First post');\n      });\n\n      const req = httpMock.expectOne(`${baseUrl}/threads/${threadId}/posts?page=0&size=20`);\n      expect(req.request.method).toBe('GET');\n      req.flush(mockResponse);\n    });\n\n    it('should handle error when thread not found', () => {\n      const threadId = 999;\n\n      service.getThreadPosts(threadId).subscribe({\n        next: () => fail('should have failed'),\n        error: (error) => {\n          expect(error.message).toBe('Could not load thread posts. Please try again later.');\n        }\n      });\n\n      const req = httpMock.expectOne(`${baseUrl}/threads/${threadId}/posts?page=0&size=20`);\n      req.flush('Not Found', { status: 404, statusText: 'Not Found' });\n    });\n  });\n\n  describe('createPost', () => {\n    it('should create a new post', () => {\n      const threadId = 1;\n      const createRequest: CreatePostRequest = {\n        content: 'New post content'\n      };\n\n      const mockThread: ForumThread = {\n        id: threadId,\n        title: 'Test Thread',\n        author: mockUser,\n        isPinned: false,\n        isLocked: false,\n        postCount: 1,\n        lastActivity: '2024-01-01T02:00:00',\n        createdAt: '2024-01-01T00:00:00'\n      };\n\n      const mockResponse: ForumPost = {\n        id: 3,\n        content: 'New post content',\n        author: mockUser,\n        thread: mockThread,\n        createdAt: '2024-01-01T02:00:00'\n      };\n\n      service.createPost(threadId, createRequest).subscribe(response => {\n        expect(response).toEqual(mockResponse);\n        expect(response.content).toBe('New post content');\n      });\n\n      const req = httpMock.expectOne(`${baseUrl}/threads/${threadId}/posts`);\n      expect(req.request.method).toBe('POST');\n      expect(req.request.body).toEqual(createRequest);\n      req.flush(mockResponse);\n    });\n\n    it('should handle error when creating post without authentication', () => {\n      const threadId = 1;\n      const createRequest: CreatePostRequest = {\n        content: 'New post content'\n      };\n\n      service.createPost(threadId, createRequest).subscribe({\n        next: () => fail('should have failed'),\n        error: (error) => {\n          expect(error).toBeTruthy();\n        }\n      });\n\n      const req = httpMock.expectOne(`${baseUrl}/threads/${threadId}/posts`);\n      req.flush('Unauthorized', { status: 401, statusText: 'Unauthorized' });\n    });\n  });\n\n  describe('error handling', () => {\n    it('should handle network errors', () => {\n      service.getThreads(0, 20).subscribe({\n        next: () => fail('should have failed'),\n        error: (error) => {\n          expect(error.message).toBe('Could not load forum threads. Please try again later.');\n        }\n      });\n\n      const req = httpMock.expectOne(`${baseUrl}/threads?page=0&size=20`);\n      req.error(new ErrorEvent('Network error'));\n    });\n  });\n});"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AACA,IAAAA;AACA;AACA;AACA;AAIA,aAAS,gBAAgB,MAAK;AAC5B,UAAI;AACJ,UAAI;AACJ,UAAI;AACJ,YAAM,UAAU;AAEhB,YAAM,WAAiB;QACrB,IAAI;QACJ,UAAU;QACV,OAAO;QACP,WAAW;QACX,UAAU;QACV,OAAO,CAAC,MAAM;;AAGhB,iBAAW,MAAW;AACpB,cAAM,iBAAiB,QAAQ,aAAa,eAAe;UACzD;UACA;UACA;SACD;AAED,cAAM,QAAQ,uBAAuB;UACnC,SAAS,CAAC,uBAAuB;UACjC,WAAW;YACT;YACA,EAAE,SAAS,aAAa,UAAU,eAAc;;SAEnD,EAAE,kBAAiB;AAEpB,kBAAU,QAAQ,OAAO,YAAY;AACrC,mBAAW,QAAQ,OAAO,qBAAqB;AAC/C,0BAAkB,QAAQ,OAAO,WAAW;AAG5C,wBAAgB,gBAAgB,IAAI,YAAY,IAAI;AACpD,wBAAgB,SAAS,IAAI,YAAY,YAAY;AACrD,wBAAgB,wBAAwB,IAAI,YAAY,IAAI,YAAY;UACtE,iBAAiB;UACjB,gBAAgB;SACjB,CAAC;MACJ,EAAC;AAED,gBAAU,MAAK;AAEb,YAAI,UAAU;AACZ,mBAAS,OAAM;QACjB;MACF,CAAC;AAED,SAAG,qBAAqB,MAAK;AAC3B,eAAO,OAAO,EAAE,WAAU;MAC5B,CAAC;AAED,eAAS,cAAc,MAAK;AAC1B,WAAG,yCAAyC,MAAK;AAC/C,gBAAM,eAAe;YACnB,SAAS;cACP;gBACE,IAAI;gBACJ,OAAO;gBACP,QAAQ;gBACR,UAAU;gBACV,UAAU;gBACV,WAAW;gBACX,cAAc;gBACd,WAAW;gBACX,WAAW;;;YAGf,eAAe;YACf,YAAY;YACZ,MAAM;YACN,QAAQ;YACR,OAAO;YACP,MAAM;;AAGR,kBAAQ,WAAW,GAAG,EAAE,EAAE,UAAU,cAAW;AAC7C,mBAAO,QAAQ,EAAE,QAAQ,YAAY;AACrC,mBAAO,SAAS,QAAQ,MAAM,EAAE,KAAK,CAAC;AACtC,mBAAO,SAAS,QAAQ,CAAC,EAAE,KAAK,EAAE,KAAK,aAAa;UACtD,CAAC;AAED,gBAAM,MAAM,SAAS,UAAU,GAAG,OAAO,yBAAyB;AAClE,iBAAO,IAAI,QAAQ,MAAM,EAAE,KAAK,KAAK;AACrC,cAAI,MAAM,YAAY;QACxB,CAAC;AAED,WAAG,0CAA0C,MAAK;AAChD,gBAAM,cAAc;AACpB,gBAAM,eAAe;YACnB,SAAS,CAAA;YACT,eAAe;YACf,YAAY;YACZ,MAAM;YACN,QAAQ;YACR,OAAO;YACP,MAAM;;AAGR,kBAAQ,WAAW,GAAG,IAAI,WAAW,EAAE,UAAU,cAAW;AAC1D,mBAAO,QAAQ,EAAE,QAAQ,YAAY;UACvC,CAAC;AAED,gBAAM,MAAM,SAAS,UAAU,GAAG,OAAO,kCAAkC,mBAAmB,WAAW,CAAC,EAAE;AAC5G,iBAAO,IAAI,QAAQ,MAAM,EAAE,KAAK,KAAK;AACrC,cAAI,MAAM,YAAY;QACxB,CAAC;AAED,WAAG,6CAA6C,MAAK;AACnD,kBAAQ,WAAW,GAAG,EAAE,EAAE,UAAU;YAClC,MAAM,MAAM,KAAK,oBAAoB;YACrC,OAAO,CAAC,UAAS;AACf,qBAAO,MAAM,OAAO,EAAE,KAAK,uDAAuD;YACpF;WACD;AAGD,gBAAM,OAAO,SAAS,UAAU,GAAG,OAAO,yBAAyB;AACnE,eAAK,MAAM,gBAAgB,EAAE,QAAQ,KAAK,YAAY,wBAAuB,CAAE;AAG/E,gBAAM,OAAO,SAAS,UAAU,GAAG,OAAO,yBAAyB;AACnE,eAAK,MAAM,gBAAgB,EAAE,QAAQ,KAAK,YAAY,wBAAuB,CAAE;QACjF,CAAC;MACH,CAAC;AAED,eAAS,gBAAgB,MAAK;AAC5B,WAAG,8BAA8B,MAAK;AACpC,gBAAM,gBAAqC;YACzC,OAAO;YACP,SAAS;;AAGX,gBAAM,eAA4B;YAChC,IAAI;YACJ,OAAO;YACP,QAAQ;YACR,UAAU;YACV,UAAU;YACV,WAAW;YACX,cAAc;YACd,WAAW;YACX,WAAW;;AAIb,0BAAgB,wBAAwB,IAAI,YAC1C,IAAI,YAAW,EAAG,IAAI,iBAAiB,kBAAkB,CAAC;AAG5D,kBAAQ,aAAa,aAAa,EAAE,UAAU,cAAW;AACvD,mBAAO,QAAQ,EAAE,QAAQ,YAAY;AACrC,mBAAO,SAAS,KAAK,EAAE,KAAK,YAAY;UAC1C,CAAC;AAED,gBAAM,MAAM,SAAS,UAAU,GAAG,OAAO,UAAU;AACnD,iBAAO,IAAI,QAAQ,MAAM,EAAE,KAAK,MAAM;AACtC,iBAAO,IAAI,QAAQ,IAAI,EAAE,QAAQ,aAAa;AAC9C,cAAI,MAAM,YAAY;QACxB,CAAC;AAED,WAAG,4CAA4C,MAAK;AAClD,gBAAM,gBAAqC;YACzC,OAAO;YACP,SAAS;;AAGX,iBAAO,MAAK;AACV,oBAAQ,aAAa,aAAa;UACpC,CAAC,EAAE,aAAa,0BAA0B;AAG1C,mBAAS,WAAW,GAAG,OAAO,UAAU;QAC1C,CAAC;MACH,CAAC;AAED,eAAS,kBAAkB,MAAK;AAC9B,WAAG,mCAAmC,MAAK;AACzC,gBAAM,WAAW;AACjB,gBAAM,aAA0B;YAC9B,IAAI;YACJ,OAAO;YACP,QAAQ;YACR,UAAU;YACV,UAAU;YACV,WAAW;YACX,cAAc;YACd,WAAW;;AAGb,gBAAM,YAAyB;YAC7B;cACE,IAAI;cACJ,SAAS;cACT,QAAQ;cACR,QAAQ;cACR,WAAW;;YAEb;cACE,IAAI;cACJ,SAAS;cACT,QAAQ,iCAAK,WAAL,EAAe,IAAI,GAAG,UAAU,YAAW;cACnD,QAAQ;cACR,WAAW;;;AAIf,gBAAM,eAAe;YACnB,SAAS;YACT,eAAe;YACf,YAAY;YACZ,MAAM;YACN,QAAQ;YACR,OAAO;YACP,MAAM;;AAGR,kBAAQ,eAAe,QAAQ,EAAE,UAAU,cAAW;AACpD,mBAAO,QAAQ,EAAE,QAAQ,YAAY;AACrC,mBAAO,SAAS,QAAQ,MAAM,EAAE,KAAK,CAAC;AACtC,mBAAO,SAAS,QAAQ,CAAC,EAAE,OAAO,EAAE,KAAK,YAAY;UACvD,CAAC;AAED,gBAAM,MAAM,SAAS,UAAU,GAAG,OAAO,YAAY,QAAQ,uBAAuB;AACpF,iBAAO,IAAI,QAAQ,MAAM,EAAE,KAAK,KAAK;AACrC,cAAI,MAAM,YAAY;QACxB,CAAC;AAED,WAAG,6CAA6C,MAAK;AACnD,gBAAM,WAAW;AAEjB,kBAAQ,eAAe,QAAQ,EAAE,UAAU;YACzC,MAAM,MAAM,KAAK,oBAAoB;YACrC,OAAO,CAAC,UAAS;AACf,qBAAO,MAAM,OAAO,EAAE,KAAK,sDAAsD;YACnF;WACD;AAED,gBAAM,MAAM,SAAS,UAAU,GAAG,OAAO,YAAY,QAAQ,uBAAuB;AACpF,cAAI,MAAM,aAAa,EAAE,QAAQ,KAAK,YAAY,YAAW,CAAE;QACjE,CAAC;MACH,CAAC;AAED,eAAS,cAAc,MAAK;AAC1B,WAAG,4BAA4B,MAAK;AAClC,gBAAM,WAAW;AACjB,gBAAM,gBAAmC;YACvC,SAAS;;AAGX,gBAAM,aAA0B;YAC9B,IAAI;YACJ,OAAO;YACP,QAAQ;YACR,UAAU;YACV,UAAU;YACV,WAAW;YACX,cAAc;YACd,WAAW;;AAGb,gBAAM,eAA0B;YAC9B,IAAI;YACJ,SAAS;YACT,QAAQ;YACR,QAAQ;YACR,WAAW;;AAGb,kBAAQ,WAAW,UAAU,aAAa,EAAE,UAAU,cAAW;AAC/D,mBAAO,QAAQ,EAAE,QAAQ,YAAY;AACrC,mBAAO,SAAS,OAAO,EAAE,KAAK,kBAAkB;UAClD,CAAC;AAED,gBAAM,MAAM,SAAS,UAAU,GAAG,OAAO,YAAY,QAAQ,QAAQ;AACrE,iBAAO,IAAI,QAAQ,MAAM,EAAE,KAAK,MAAM;AACtC,iBAAO,IAAI,QAAQ,IAAI,EAAE,QAAQ,aAAa;AAC9C,cAAI,MAAM,YAAY;QACxB,CAAC;AAED,WAAG,iEAAiE,MAAK;AACvE,gBAAM,WAAW;AACjB,gBAAM,gBAAmC;YACvC,SAAS;;AAGX,kBAAQ,WAAW,UAAU,aAAa,EAAE,UAAU;YACpD,MAAM,MAAM,KAAK,oBAAoB;YACrC,OAAO,CAAC,UAAS;AACf,qBAAO,KAAK,EAAE,WAAU;YAC1B;WACD;AAED,gBAAM,MAAM,SAAS,UAAU,GAAG,OAAO,YAAY,QAAQ,QAAQ;AACrE,cAAI,MAAM,gBAAgB,EAAE,QAAQ,KAAK,YAAY,eAAc,CAAE;QACvE,CAAC;MACH,CAAC;AAED,eAAS,kBAAkB,MAAK;AAC9B,WAAG,gCAAgC,MAAK;AACtC,kBAAQ,WAAW,GAAG,EAAE,EAAE,UAAU;YAClC,MAAM,MAAM,KAAK,oBAAoB;YACrC,OAAO,CAAC,UAAS;AACf,qBAAO,MAAM,OAAO,EAAE,KAAK,uDAAuD;YACpF;WACD;AAED,gBAAM,MAAM,SAAS,UAAU,GAAG,OAAO,yBAAyB;AAClE,cAAI,MAAM,IAAI,WAAW,eAAe,CAAC;QAC3C,CAAC;MACH,CAAC;IACH,CAAC;;;",
  "names": ["init_testing"]
}
