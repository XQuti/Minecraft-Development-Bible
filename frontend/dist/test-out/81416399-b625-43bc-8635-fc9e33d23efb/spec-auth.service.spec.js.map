{
  "version": 3,
  "sources": ["src/app/services/auth.service.spec.ts"],
  "sourcesContent": ["import { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { AuthService } from './auth.service';\nimport { User } from '../models/user.model';\nimport { of } from 'rxjs';\n\n// Test helper interface to access private members safely\ninterface AuthServiceTestable {\n  redirectToOAuth(provider: string): void;\n  getTokenFromCookie(): string | null;\n  authToken: string | null;\n}\n\ndescribe('AuthService', () => {\n  let service: AuthService;\n  let testableService: AuthServiceTestable;\n  let httpMock: HttpTestingController;\n\n  const mockUser: User = {\n    id: 1,\n    email: 'test@example.com',\n    username: 'testuser',\n    avatarUrl: undefined,\n    provider: 'local',\n    roles: ['USER']\n  };\n\n\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      providers: [AuthService]\n    }).compileComponents();\n    \n    service = TestBed.inject(AuthService);\n    testableService = service as unknown as AuthServiceTestable;\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n\n  afterEach(() => {\n    // Clear any auth token safely\n    if (service && testableService) {\n      testableService.authToken = null;\n    }\n    // Clear cookies safely in test environment\n    if (typeof document !== 'undefined') {\n      document.cookie = 'auth_token=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';\n    }\n    \n    // Verify that no unmatched requests are outstanding\n    if (httpMock) {\n      httpMock.verify();\n    }\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n\n  // Note: register method not implemented in current AuthService\n  // This service uses OAuth2 authentication only\n\n  describe('login', () => {\n    it('should redirect to OAuth provider', () => {\n      // Mock window.location.href by spying on the service method that uses it\n      spyOn(testableService, 'redirectToOAuth').and.callFake((provider: string) => {\n        // Simulate the redirect behavior\n        expect(provider).toBe('google');\n      });\n      \n      service.login('google');\n      \n      expect(testableService.redirectToOAuth).toHaveBeenCalledWith('google');\n    });\n\n    it('should handle invalid provider', () => {\n      spyOn(console, 'error');\n      \n      service.login('invalid' as 'google' | 'github');\n      \n      expect(console.error).toHaveBeenCalledWith('Invalid OAuth provider:', 'invalid');\n    });\n  });\n\n  describe('logout', () => {\n    it('should clear token and call logout endpoint', () => {\n      // Set token using the testable service interface\n      testableService.authToken = 'jwt-token';\n\n      service.logout().subscribe(response => {\n        expect(response).toBeDefined();\n        expect(testableService.authToken).toBeNull();\n      });\n\n      const req = httpMock.expectOne('http://localhost:8080/api/auth/logout');\n      expect(req.request.method).toBe('POST');\n      expect(req.request.headers.get('Authorization')).toBe('Bearer jwt-token');\n      req.flush({ message: 'Logged out successfully' });\n    });\n\n    it('should clear token even if logout endpoint fails', () => {\n      testableService.authToken = 'jwt-token';\n\n      service.logout().subscribe(response => {\n        expect(response).toBeDefined();\n        expect(testableService.authToken).toBeNull();\n      });\n\n      const req = httpMock.expectOne('http://localhost:8080/api/auth/logout');\n      req.flush('Server error', { status: 500, statusText: 'Internal Server Error' });\n    });\n  });\n\n  describe('getCurrentUser', () => {\n    it('should return current user when token exists', () => {\n      testableService.authToken = 'jwt-token';\n\n      service.getCurrentUser().subscribe(user => {\n        expect(user).toEqual(mockUser);\n      });\n\n      const req = httpMock.expectOne('http://localhost:8080/api/auth/me');\n      expect(req.request.method).toBe('GET');\n      expect(req.request.headers.get('Authorization')).toBe('Bearer jwt-token');\n      req.flush(mockUser);\n    });\n\n    it('should return null when no token exists', () => {\n      testableService.authToken = null;\n\n      service.getCurrentUser().subscribe(user => {\n        expect(user).toBeNull();\n      });\n\n      httpMock.expectNone('http://localhost:8080/api/auth/me');\n    });\n\n    it('should handle getCurrentUser error', (done) => {\n      testableService.authToken = 'jwt-token';\n      const logoutSpy = spyOn(service, 'logout').and.returnValue(of({ message: 'Logged out' }));\n\n      service.getCurrentUser().subscribe({\n        next: user => {\n          expect(user).toBeNull();\n          \n          // Check if logout was called after a short delay to allow async operation\n          setTimeout(() => {\n            expect(logoutSpy).toHaveBeenCalled();\n            done();\n          }, 10);\n        },\n        error: () => {\n          fail('Should not reach error handler, service handles errors internally');\n          done();\n        }\n      });\n\n      const req = httpMock.expectOne('http://localhost:8080/api/auth/me');\n      req.error(new ErrorEvent('Network error'), { status: 401, statusText: 'Unauthorized' });\n    });\n  });\n\n  describe('getToken', () => {\n    it('should return token from memory', () => {\n      testableService.authToken = 'jwt-token';\n      expect(service.getToken()).toBe('jwt-token');\n    });\n\n    it('should return null when no token exists', () => {\n      testableService.authToken = null;\n      expect(service.getToken()).toBeNull();\n    });\n  });\n\n  describe('isAuthenticated', () => {\n    it('should return true when token exists', () => {\n      testableService.authToken = 'jwt-token';\n      expect(service.isAuthenticated()).toBe(true);\n    });\n\n    it('should return false when no token exists', () => {\n      testableService.authToken = null;\n      expect(service.isAuthenticated()).toBe(false);\n    });\n  });\n\n  describe('handleAuthCallback', () => {\n    it('should handle auth callback with valid token', () => {\n      // Mock the getTokenFromCookie method to return a token\n      spyOn(testableService, 'getTokenFromCookie').and.returnValue('jwt-token');\n      testableService.authToken = 'jwt-token';\n      \n      service.handleAuthCallback();\n\n      const req = httpMock.expectOne('http://localhost:8080/api/auth/me');\n      expect(req.request.method).toBe('GET');\n      req.flush(mockUser);\n    });\n\n    it('should handle auth callback and logout on error', (done) => {\n      spyOn(testableService, 'getTokenFromCookie').and.returnValue('invalid-token');\n      testableService.authToken = 'invalid-token';\n      const logoutSpy = spyOn(service, 'logout').and.returnValue(of({ message: 'Logged out' }));\n      \n      service.handleAuthCallback();\n      \n      const req = httpMock.expectOne('http://localhost:8080/api/auth/me');\n      req.error(new ErrorEvent('Network error'), { status: 401, statusText: 'Unauthorized' });\n      \n      // Check if logout was called after a short delay to allow async operation\n      setTimeout(() => {\n        expect(logoutSpy).toHaveBeenCalled();\n        done();\n      }, 10);\n    });\n  });\n});"],
  "mappings": "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",
  "names": ["init_testing"]
}
