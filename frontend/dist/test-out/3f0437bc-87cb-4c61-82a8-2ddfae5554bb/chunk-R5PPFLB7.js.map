{
  "version": 3,
  "sources": ["src/app/services/forum.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams, HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { catchError, timeout, retry } from 'rxjs/operators';\nimport { ForumThread, ForumPost, CreateThreadRequest, CreatePostRequest, PageResponse } from '../models/forum.model';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ForumService {\n  private readonly API_URL = 'http://localhost:8080/api/forums';\n  private readonly REQUEST_TIMEOUT = 15000; // 15 seconds for forum operations\n\n  constructor(\n    private http: HttpClient,\n    private authService: AuthService\n  ) {}\n\n  getThreads(page: number = 0, size: number = 20, categoryOrSearch?: string): Observable<PageResponse<ForumThread>> {\n    // Validate parameters\n    if (page < 0) page = 0;\n    if (size < 1 || size > 100) size = 20;\n\n    let params = new HttpParams()\n      .set('page', page.toString())\n      .set('size', size.toString());\n    \n    if (categoryOrSearch && categoryOrSearch.trim() !== '') {\n      // Check if it's a search query (contains spaces or special characters) or category\n      if (categoryOrSearch.includes(' ') || categoryOrSearch.length > 20) {\n        params = params.set('search', categoryOrSearch.trim());\n      } else {\n        params = params.set('category', categoryOrSearch.trim());\n      }\n    }\n    \n    return this.http.get<PageResponse<ForumThread>>(`${this.API_URL}/threads`, { params }).pipe(\n      timeout(this.REQUEST_TIMEOUT),\n      retry(1),\n      catchError((error: HttpErrorResponse) => {\n        console.error('Error fetching forum threads:', error);\n        // Return a user-friendly error message\n        throw new Error('Could not load forum threads. Please try again later.');\n      })\n    );\n  }\n\n  getThread(threadId: number): Observable<ForumThread> {\n    if (!threadId || threadId <= 0) {\n      throw new Error('Invalid thread ID');\n    }\n\n    return this.http.get<ForumThread>(`${this.API_URL}/threads/${threadId}`).pipe(\n      timeout(this.REQUEST_TIMEOUT),\n      retry(1),\n      catchError((error: HttpErrorResponse) => {\n        console.error(`Error fetching thread ${threadId}:`, error);\n        throw new Error('Could not load thread. Please try again later.');\n      })\n    );\n  }\n\n  createThread(request: CreateThreadRequest): Observable<ForumThread> {\n    if (!request || !request.title || request.title.trim() === '') {\n      throw new Error('Thread title is required');\n    }\n\n    // Validate request\n    const validatedRequest: CreateThreadRequest = {\n      title: request.title.trim(),\n      content: request.content ? request.content.trim() : undefined\n    };\n\n    try {\n      const headers = this.authService.getAuthenticatedHeaders();\n      return this.http.post<ForumThread>(`${this.API_URL}/threads`, validatedRequest, { headers }).pipe(\n        timeout(this.REQUEST_TIMEOUT),\n        catchError((error: HttpErrorResponse) => {\n          console.error('Error creating forum thread:', error);\n          throw new Error('Could not create thread. Please try again later.');\n        })\n      );\n    } catch (error) {\n      console.error('Authentication error when creating thread:', error);\n      throw error;\n    }\n  }\n\n  getThreadPosts(threadId: number, page: number = 0, size: number = 20): Observable<PageResponse<ForumPost>> {\n    if (!threadId || threadId <= 0) {\n      throw new Error('Invalid thread ID');\n    }\n\n    // Validate parameters\n    if (page < 0) page = 0;\n    if (size < 1 || size > 100) size = 20;\n\n    const params = new HttpParams()\n      .set('page', page.toString())\n      .set('size', size.toString());\n    \n    return this.http.get<PageResponse<ForumPost>>(`${this.API_URL}/threads/${threadId}/posts`, { params }).pipe(\n      timeout(this.REQUEST_TIMEOUT),\n      retry(1),\n      catchError((error: HttpErrorResponse) => {\n        console.error(`Error fetching posts for thread ${threadId}:`, error);\n        throw new Error('Could not load thread posts. Please try again later.');\n      })\n    );\n  }\n\n  createPost(threadId: number, request: CreatePostRequest): Observable<ForumPost> {\n    if (!threadId || threadId <= 0) {\n      throw new Error('Invalid thread ID');\n    }\n\n    if (!request || !request.content || request.content.trim() === '') {\n      throw new Error('Post content is required');\n    }\n\n    // Validate request\n    const validatedRequest: CreatePostRequest = {\n      content: request.content.trim()\n    };\n\n    try {\n      const headers = this.authService.getAuthenticatedHeaders();\n      return this.http.post<ForumPost>(`${this.API_URL}/threads/${threadId}/posts`, validatedRequest, { headers }).pipe(\n        timeout(this.REQUEST_TIMEOUT),\n        catchError((error: HttpErrorResponse) => {\n          console.error(`Error creating post in thread ${threadId}:`, error);\n          throw new Error('Could not create post. Please try again later.');\n        })\n      );\n    } catch (error) {\n      console.error('Authentication error when creating post:', error);\n      throw error;\n    }\n  }\n}"],
  "mappings": "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",
  "names": ["ForumService"]
}
