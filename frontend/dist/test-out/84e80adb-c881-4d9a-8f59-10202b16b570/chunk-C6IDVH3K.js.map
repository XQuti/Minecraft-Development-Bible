{"version":3,"sources":["node_modules/@angular/router/fesm2022/testing.mjs"],"sourcesContent":["/**\n * @license Angular v19.2.14\n * (c) 2010-2025 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport * as i0 from '@angular/core';\nimport { NgModule, signal, Injectable, ViewChild, Component } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { ROUTES, ROUTER_CONFIGURATION, Router, afterNextNavigation, RouterOutlet } from './router-Dwfin5Au.mjs';\nexport { ɵEmptyOutletComponent as ɵɵEmptyOutletComponent } from './router-Dwfin5Au.mjs';\nimport { RouterModule, ROUTER_PROVIDERS, withPreloading, NoPreloading } from './router_module-DTJgGWLd.mjs';\nexport { RouterLink as ɵɵRouterLink, RouterLinkActive as ɵɵRouterLinkActive } from './router_module-DTJgGWLd.mjs';\nimport { provideLocationMocks } from '@angular/common/testing';\nimport '@angular/common';\nimport 'rxjs';\nimport 'rxjs/operators';\nimport '@angular/platform-browser';\n\n/**\n * @description\n *\n * Sets up the router to be used for testing.\n *\n * The modules sets up the router to be used for testing.\n * It provides spy implementations of `Location` and `LocationStrategy`.\n *\n * @usageNotes\n * ### Example\n *\n * ```ts\n * beforeEach(() => {\n *   TestBed.configureTestingModule({\n *     imports: [\n *       RouterModule.forRoot(\n *         [{path: '', component: BlankCmp}, {path: 'simple', component: SimpleCmp}]\n *       )\n *     ]\n *   });\n * });\n * ```\n *\n * @publicApi\n * @deprecated Use `provideRouter` or `RouterModule`/`RouterModule.forRoot` instead.\n * This module was previously used to provide a helpful collection of test fakes,\n * most notably those for `Location` and `LocationStrategy`.  These are generally not\n * required anymore, as `MockPlatformLocation` is provided in `TestBed` by default.\n * However, you can use them directly with `provideLocationMocks`.\n */\nclass RouterTestingModule {\n  static withRoutes(routes, config) {\n    return {\n      ngModule: RouterTestingModule,\n      providers: [{\n        provide: ROUTES,\n        multi: true,\n        useValue: routes\n      }, {\n        provide: ROUTER_CONFIGURATION,\n        useValue: config ? config : {}\n      }]\n    };\n  }\n  static ɵfac = i0.ɵɵngDeclareFactory({\n    minVersion: \"12.0.0\",\n    version: \"19.2.14\",\n    ngImport: i0,\n    type: RouterTestingModule,\n    deps: [],\n    target: i0.ɵɵFactoryTarget.NgModule\n  });\n  static ɵmod = i0.ɵɵngDeclareNgModule({\n    minVersion: \"14.0.0\",\n    version: \"19.2.14\",\n    ngImport: i0,\n    type: RouterTestingModule,\n    exports: [RouterModule]\n  });\n  static ɵinj = i0.ɵɵngDeclareInjector({\n    minVersion: \"12.0.0\",\n    version: \"19.2.14\",\n    ngImport: i0,\n    type: RouterTestingModule,\n    providers: [ROUTER_PROVIDERS, provideLocationMocks(), withPreloading(NoPreloading).ɵproviders, {\n      provide: ROUTES,\n      multi: true,\n      useValue: []\n    }],\n    imports: [RouterModule]\n  });\n}\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"19.2.14\",\n  ngImport: i0,\n  type: RouterTestingModule,\n  decorators: [{\n    type: NgModule,\n    args: [{\n      exports: [RouterModule],\n      providers: [ROUTER_PROVIDERS, provideLocationMocks(), withPreloading(NoPreloading).ɵproviders, {\n        provide: ROUTES,\n        multi: true,\n        useValue: []\n      }]\n    }]\n  }]\n});\nclass RootFixtureService {\n  fixture;\n  harness;\n  createHarness() {\n    if (this.harness) {\n      throw new Error('Only one harness should be created per test.');\n    }\n    this.harness = new RouterTestingHarness(this.getRootFixture());\n    return this.harness;\n  }\n  getRootFixture() {\n    if (this.fixture !== undefined) {\n      return this.fixture;\n    }\n    this.fixture = TestBed.createComponent(RootCmp);\n    this.fixture.detectChanges();\n    return this.fixture;\n  }\n  static ɵfac = i0.ɵɵngDeclareFactory({\n    minVersion: \"12.0.0\",\n    version: \"19.2.14\",\n    ngImport: i0,\n    type: RootFixtureService,\n    deps: [],\n    target: i0.ɵɵFactoryTarget.Injectable\n  });\n  static ɵprov = i0.ɵɵngDeclareInjectable({\n    minVersion: \"12.0.0\",\n    version: \"19.2.14\",\n    ngImport: i0,\n    type: RootFixtureService,\n    providedIn: 'root'\n  });\n}\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"19.2.14\",\n  ngImport: i0,\n  type: RootFixtureService,\n  decorators: [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }]\n});\nclass RootCmp {\n  outlet;\n  routerOutletData = signal(undefined);\n  static ɵfac = i0.ɵɵngDeclareFactory({\n    minVersion: \"12.0.0\",\n    version: \"19.2.14\",\n    ngImport: i0,\n    type: RootCmp,\n    deps: [],\n    target: i0.ɵɵFactoryTarget.Component\n  });\n  static ɵcmp = i0.ɵɵngDeclareComponent({\n    minVersion: \"14.0.0\",\n    version: \"19.2.14\",\n    type: RootCmp,\n    isStandalone: true,\n    selector: \"ng-component\",\n    viewQueries: [{\n      propertyName: \"outlet\",\n      first: true,\n      predicate: RouterOutlet,\n      descendants: true\n    }],\n    ngImport: i0,\n    template: '<router-outlet [routerOutletData]=\"routerOutletData()\"></router-outlet>',\n    isInline: true,\n    dependencies: [{\n      kind: \"directive\",\n      type: RouterOutlet,\n      selector: \"router-outlet\",\n      inputs: [\"name\", \"routerOutletData\"],\n      outputs: [\"activate\", \"deactivate\", \"attach\", \"detach\"],\n      exportAs: [\"outlet\"]\n    }]\n  });\n}\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"19.2.14\",\n  ngImport: i0,\n  type: RootCmp,\n  decorators: [{\n    type: Component,\n    args: [{\n      template: '<router-outlet [routerOutletData]=\"routerOutletData()\"></router-outlet>',\n      imports: [RouterOutlet]\n    }]\n  }],\n  propDecorators: {\n    outlet: [{\n      type: ViewChild,\n      args: [RouterOutlet]\n    }]\n  }\n});\n/**\n * A testing harness for the `Router` to reduce the boilerplate needed to test routes and routed\n * components.\n *\n * @publicApi\n */\nclass RouterTestingHarness {\n  /**\n   * Creates a `RouterTestingHarness` instance.\n   *\n   * The `RouterTestingHarness` also creates its own root component with a `RouterOutlet` for the\n   * purposes of rendering route components.\n   *\n   * Throws an error if an instance has already been created.\n   * Use of this harness also requires `destroyAfterEach: true` in the `ModuleTeardownOptions`\n   *\n   * @param initialUrl The target of navigation to trigger before returning the harness.\n   */\n  static async create(initialUrl) {\n    const harness = TestBed.inject(RootFixtureService).createHarness();\n    if (initialUrl !== undefined) {\n      await harness.navigateByUrl(initialUrl);\n    }\n    return harness;\n  }\n  /**\n   * Fixture of the root component of the RouterTestingHarness\n   */\n  fixture;\n  /** @internal */\n  constructor(fixture) {\n    this.fixture = fixture;\n  }\n  /** Instructs the root fixture to run change detection. */\n  detectChanges() {\n    this.fixture.detectChanges();\n  }\n  /** The `DebugElement` of the `RouterOutlet` component. `null` if the outlet is not activated. */\n  get routeDebugElement() {\n    const outlet = this.fixture.componentInstance.outlet;\n    if (!outlet || !outlet.isActivated) {\n      return null;\n    }\n    return this.fixture.debugElement.query(v => v.componentInstance === outlet.component);\n  }\n  /** The native element of the `RouterOutlet` component. `null` if the outlet is not activated. */\n  get routeNativeElement() {\n    return this.routeDebugElement?.nativeElement ?? null;\n  }\n  async navigateByUrl(url, requiredRoutedComponentType) {\n    const router = TestBed.inject(Router);\n    let resolveFn;\n    const redirectTrackingPromise = new Promise(resolve => {\n      resolveFn = resolve;\n    });\n    afterNextNavigation(TestBed.inject(Router), resolveFn);\n    await router.navigateByUrl(url);\n    await redirectTrackingPromise;\n    this.fixture.detectChanges();\n    const outlet = this.fixture.componentInstance.outlet;\n    // The outlet might not be activated if the user is testing a navigation for a guard that\n    // rejects\n    if (outlet && outlet.isActivated && outlet.activatedRoute.component) {\n      const activatedComponent = outlet.component;\n      if (requiredRoutedComponentType !== undefined && !(activatedComponent instanceof requiredRoutedComponentType)) {\n        throw new Error(`Unexpected routed component type. Expected ${requiredRoutedComponentType.name} but got ${activatedComponent.constructor.name}`);\n      }\n      return activatedComponent;\n    } else {\n      if (requiredRoutedComponentType !== undefined) {\n        throw new Error(`Unexpected routed component type. Expected ${requiredRoutedComponentType.name} but the navigation did not activate any component.`);\n      }\n      return null;\n    }\n  }\n}\nexport { RouterTestingHarness, RouterTestingModule, RouterOutlet as ɵɵRouterOutlet };\n"],"mappings":"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","names":["init_testing"],"x_google_ignoreList":[0]}