{
  "version": 3,
  "sources": ["src/app/services/auth.service.spec.ts"],
  "sourcesContent": ["import { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { AuthService } from './auth.service';\nimport { User } from '../models/user.model';\nimport { of } from 'rxjs';\n\ndescribe('AuthService', () => {\n  let service: AuthService;\n  let httpMock: HttpTestingController;\n\n  const mockUser: User = {\n    id: 1,\n    email: 'test@example.com',\n    username: 'testuser',\n    avatarUrl: undefined,\n    provider: 'local',\n    roles: ['USER']\n  };\n\n  const mockAuthResponse = {\n    token: 'jwt-token',\n    user: mockUser\n  };\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      providers: [AuthService]\n    });\n    service = TestBed.inject(AuthService);\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n\n  afterEach(() => {\n    httpMock.verify();\n    localStorage.clear();\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n\n  // Note: register method not implemented in current AuthService\n  // This service uses OAuth2 authentication only\n\n  describe('login', () => {\n    it('should redirect to OAuth provider', () => {\n      // Mock window.location.href\n      const mockLocation = { href: '' };\n      Object.defineProperty(window, 'location', {\n        value: mockLocation,\n        writable: true\n      });\n\n      service.login('google');\n\n      expect(mockLocation.href).toBe('http://localhost:8080/oauth2/authorization/google');\n    });\n\n    it('should handle invalid provider', () => {\n      spyOn(console, 'error');\n      \n      service.login('invalid' as any);\n      \n      expect(console.error).toHaveBeenCalledWith('Invalid OAuth provider:', 'invalid');\n    });\n  });\n\n  describe('logout', () => {\n    it('should clear local storage and call logout endpoint', () => {\n      localStorage.setItem('auth_token', 'jwt-token');\n\n      service.logout().subscribe(response => {\n        expect(response).toBeDefined();\n        expect(localStorage.getItem('auth_token')).toBeNull();\n      });\n\n      const req = httpMock.expectOne('http://localhost:8080/api/auth/logout');\n      expect(req.request.method).toBe('POST');\n      expect(req.request.headers.get('Authorization')).toBe('Bearer jwt-token');\n      req.flush({ message: 'Logged out successfully' });\n    });\n\n    it('should clear local storage even if logout endpoint fails', () => {\n      localStorage.setItem('auth_token', 'jwt-token');\n\n      service.logout().subscribe(response => {\n        expect(response).toBeDefined();\n        expect(localStorage.getItem('auth_token')).toBeNull();\n      });\n\n      const req = httpMock.expectOne('http://localhost:8080/api/auth/logout');\n      req.flush('Server error', { status: 500, statusText: 'Internal Server Error' });\n    });\n  });\n\n  describe('getCurrentUser', () => {\n    it('should return current user when token exists', () => {\n      localStorage.setItem('auth_token', 'jwt-token');\n\n      service.getCurrentUser().subscribe(user => {\n        expect(user).toEqual(mockUser);\n      });\n\n      const req = httpMock.expectOne('http://localhost:8080/api/auth/me');\n      expect(req.request.method).toBe('GET');\n      expect(req.request.headers.get('Authorization')).toBe('Bearer jwt-token');\n      req.flush(mockUser);\n    });\n\n    it('should return null when no token exists', () => {\n      service.getCurrentUser().subscribe(user => {\n        expect(user).toBeNull();\n      });\n\n      httpMock.expectNone('http://localhost:8080/api/auth/me');\n    });\n\n    it('should handle getCurrentUser error', () => {\n      localStorage.setItem('auth_token', 'jwt-token');\n\n      service.getCurrentUser().subscribe(user => {\n        expect(user).toBeNull();\n      });\n\n      const req = httpMock.expectOne('http://localhost:8080/api/auth/me');\n      req.flush('Unauthorized', { status: 401, statusText: 'Unauthorized' });\n    });\n  });\n\n  describe('getToken', () => {\n    it('should return token from localStorage', () => {\n      localStorage.setItem('auth_token', 'jwt-token');\n      expect(service.getToken()).toBe('jwt-token');\n    });\n\n    it('should return null when no token exists', () => {\n      expect(service.getToken()).toBeNull();\n    });\n  });\n\n  describe('isAuthenticated', () => {\n    it('should return true when token exists', () => {\n      localStorage.setItem('auth_token', 'jwt-token');\n      expect(service.isAuthenticated()).toBe(true);\n    });\n\n    it('should return false when no token exists', () => {\n      expect(service.isAuthenticated()).toBe(false);\n    });\n  });\n\n  describe('handleAuthCallback', () => {\n    it('should handle auth callback with valid token', () => {\n      // Mock the getTokenFromCookie method to return a token\n      spyOn(service as any, 'getTokenFromCookie').and.returnValue('jwt-token');\n      \n      service.handleAuthCallback();\n\n      const req = httpMock.expectOne('http://localhost:8080/api/auth/me');\n      expect(req.request.method).toBe('GET');\n      req.flush(mockUser);\n    });\n\n    it('should handle auth callback and logout on error', () => {\n      spyOn(service as any, 'getTokenFromCookie').and.returnValue('invalid-token');\n      spyOn(service, 'logout').and.returnValue(of({ message: 'Logged out' }));\n      \n      service.handleAuthCallback();\n      \n      const req = httpMock.expectOne('http://localhost:8080/api/auth/me');\n      req.error(new ErrorEvent('Network error'));\n      \n      expect(service.logout).toHaveBeenCalled();\n    });\n  });\n});"],
  "mappings": "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",
  "names": ["init_testing"]
}
