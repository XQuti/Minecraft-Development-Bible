{"version":3,"sources":["node_modules/@angular/common/fesm2022/http/testing.mjs"],"sourcesContent":["/**\n * @license Angular v19.2.14\n * (c) 2010-2025 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport * as i0 from '@angular/core';\nimport { Injectable, NgModule } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpHeaders, HttpResponse, HttpStatusCode, HttpErrorResponse, HttpEventType, HttpBackend, REQUESTS_CONTRIBUTE_TO_STABILITY, HttpClientModule } from '../module-z3bvLlVg.mjs';\nimport 'rxjs/operators';\nimport '../xhr-BfNfxNDv.mjs';\nimport '../dom_tokens-rA0ACyx7.mjs';\n\n/**\n * Controller to be injected into tests, that allows for mocking and flushing\n * of requests.\n *\n * @publicApi\n */\nclass HttpTestingController {}\n\n/**\n * A mock requests that was received and is ready to be answered.\n *\n * This interface allows access to the underlying `HttpRequest`, and allows\n * responding with `HttpEvent`s or `HttpErrorResponse`s.\n *\n * @publicApi\n */\nclass TestRequest {\n  request;\n  observer;\n  /**\n   * Whether the request was cancelled after it was sent.\n   */\n  get cancelled() {\n    return this._cancelled;\n  }\n  /**\n   * @internal set by `HttpClientTestingBackend`\n   */\n  _cancelled = false;\n  constructor(request, observer) {\n    this.request = request;\n    this.observer = observer;\n  }\n  /**\n   * Resolve the request by returning a body plus additional HTTP information (such as response\n   * headers) if provided.\n   * If the request specifies an expected body type, the body is converted into the requested type.\n   * Otherwise, the body is converted to `JSON` by default.\n   *\n   * Both successful and unsuccessful responses can be delivered via `flush()`.\n   */\n  flush(body, opts = {}) {\n    if (this.cancelled) {\n      throw new Error(`Cannot flush a cancelled request.`);\n    }\n    const url = this.request.urlWithParams;\n    const headers = opts.headers instanceof HttpHeaders ? opts.headers : new HttpHeaders(opts.headers);\n    body = _maybeConvertBody(this.request.responseType, body);\n    let statusText = opts.statusText;\n    let status = opts.status !== undefined ? opts.status : HttpStatusCode.Ok;\n    if (opts.status === undefined) {\n      if (body === null) {\n        status = HttpStatusCode.NoContent;\n        statusText ||= 'No Content';\n      } else {\n        statusText ||= 'OK';\n      }\n    }\n    if (statusText === undefined) {\n      throw new Error('statusText is required when setting a custom status.');\n    }\n    if (status >= 200 && status < 300) {\n      this.observer.next(new HttpResponse({\n        body,\n        headers,\n        status,\n        statusText,\n        url\n      }));\n      this.observer.complete();\n    } else {\n      this.observer.error(new HttpErrorResponse({\n        error: body,\n        headers,\n        status,\n        statusText,\n        url\n      }));\n    }\n  }\n  error(error, opts = {}) {\n    if (this.cancelled) {\n      throw new Error(`Cannot return an error for a cancelled request.`);\n    }\n    if (opts.status && opts.status >= 200 && opts.status < 300) {\n      throw new Error(`error() called with a successful status.`);\n    }\n    const headers = opts.headers instanceof HttpHeaders ? opts.headers : new HttpHeaders(opts.headers);\n    this.observer.error(new HttpErrorResponse({\n      error,\n      headers,\n      status: opts.status || 0,\n      statusText: opts.statusText || '',\n      url: this.request.urlWithParams\n    }));\n  }\n  /**\n   * Deliver an arbitrary `HttpEvent` (such as a progress event) on the response stream for this\n   * request.\n   */\n  event(event) {\n    if (this.cancelled) {\n      throw new Error(`Cannot send events to a cancelled request.`);\n    }\n    this.observer.next(event);\n  }\n}\n/**\n * Helper function to convert a response body to an ArrayBuffer.\n */\nfunction _toArrayBufferBody(body) {\n  if (typeof ArrayBuffer === 'undefined') {\n    throw new Error('ArrayBuffer responses are not supported on this platform.');\n  }\n  if (body instanceof ArrayBuffer) {\n    return body;\n  }\n  throw new Error('Automatic conversion to ArrayBuffer is not supported for response type.');\n}\n/**\n * Helper function to convert a response body to a Blob.\n */\nfunction _toBlob(body) {\n  if (typeof Blob === 'undefined') {\n    throw new Error('Blob responses are not supported on this platform.');\n  }\n  if (body instanceof Blob) {\n    return body;\n  }\n  if (ArrayBuffer && body instanceof ArrayBuffer) {\n    return new Blob([body]);\n  }\n  throw new Error('Automatic conversion to Blob is not supported for response type.');\n}\n/**\n * Helper function to convert a response body to JSON data.\n */\nfunction _toJsonBody(body, format = 'JSON') {\n  if (typeof ArrayBuffer !== 'undefined' && body instanceof ArrayBuffer) {\n    throw new Error(`Automatic conversion to ${format} is not supported for ArrayBuffers.`);\n  }\n  if (typeof Blob !== 'undefined' && body instanceof Blob) {\n    throw new Error(`Automatic conversion to ${format} is not supported for Blobs.`);\n  }\n  if (typeof body === 'string' || typeof body === 'number' || typeof body === 'object' || typeof body === 'boolean' || Array.isArray(body)) {\n    return body;\n  }\n  throw new Error(`Automatic conversion to ${format} is not supported for response type.`);\n}\n/**\n * Helper function to convert a response body to a string.\n */\nfunction _toTextBody(body) {\n  if (typeof body === 'string') {\n    return body;\n  }\n  if (typeof ArrayBuffer !== 'undefined' && body instanceof ArrayBuffer) {\n    throw new Error('Automatic conversion to text is not supported for ArrayBuffers.');\n  }\n  if (typeof Blob !== 'undefined' && body instanceof Blob) {\n    throw new Error('Automatic conversion to text is not supported for Blobs.');\n  }\n  return JSON.stringify(_toJsonBody(body, 'text'));\n}\n/**\n * Convert a response body to the requested type.\n */\nfunction _maybeConvertBody(responseType, body) {\n  if (body === null) {\n    return null;\n  }\n  switch (responseType) {\n    case 'arraybuffer':\n      return _toArrayBufferBody(body);\n    case 'blob':\n      return _toBlob(body);\n    case 'json':\n      return _toJsonBody(body);\n    case 'text':\n      return _toTextBody(body);\n    default:\n      throw new Error(`Unsupported responseType: ${responseType}`);\n  }\n}\n\n/**\n * A testing backend for `HttpClient` which both acts as an `HttpBackend`\n * and as the `HttpTestingController`.\n *\n * `HttpClientTestingBackend` works by keeping a list of all open requests.\n * As requests come in, they're added to the list. Users can assert that specific\n * requests were made and then flush them. In the end, a verify() method asserts\n * that no unexpected requests were made.\n *\n *\n */\nclass HttpClientTestingBackend {\n  /**\n   * List of pending requests which have not yet been expected.\n   */\n  open = [];\n  /**\n   * Used when checking if we need to throw the NOT_USING_FETCH_BACKEND_IN_SSR error\n   */\n  isTestingBackend = true;\n  /**\n   * Handle an incoming request by queueing it in the list of open requests.\n   */\n  handle(req) {\n    return new Observable(observer => {\n      const testReq = new TestRequest(req, observer);\n      this.open.push(testReq);\n      observer.next({\n        type: HttpEventType.Sent\n      });\n      return () => {\n        testReq._cancelled = true;\n      };\n    });\n  }\n  /**\n   * Helper function to search for requests in the list of open requests.\n   */\n  _match(match) {\n    if (typeof match === 'string') {\n      return this.open.filter(testReq => testReq.request.urlWithParams === match);\n    } else if (typeof match === 'function') {\n      return this.open.filter(testReq => match(testReq.request));\n    } else {\n      return this.open.filter(testReq => (!match.method || testReq.request.method === match.method.toUpperCase()) && (!match.url || testReq.request.urlWithParams === match.url));\n    }\n  }\n  /**\n   * Search for requests in the list of open requests, and return all that match\n   * without asserting anything about the number of matches.\n   */\n  match(match) {\n    const results = this._match(match);\n    results.forEach(result => {\n      const index = this.open.indexOf(result);\n      if (index !== -1) {\n        this.open.splice(index, 1);\n      }\n    });\n    return results;\n  }\n  /**\n   * Expect that a single outstanding request matches the given matcher, and return\n   * it.\n   *\n   * Requests returned through this API will no longer be in the list of open requests,\n   * and thus will not match twice.\n   */\n  expectOne(match, description) {\n    description ||= this.descriptionFromMatcher(match);\n    const matches = this.match(match);\n    if (matches.length > 1) {\n      throw new Error(`Expected one matching request for criteria \"${description}\", found ${matches.length} requests.`);\n    }\n    if (matches.length === 0) {\n      let message = `Expected one matching request for criteria \"${description}\", found none.`;\n      if (this.open.length > 0) {\n        // Show the methods and URLs of open requests in the error, for convenience.\n        const requests = this.open.map(describeRequest).join(', ');\n        message += ` Requests received are: ${requests}.`;\n      }\n      throw new Error(message);\n    }\n    return matches[0];\n  }\n  /**\n   * Expect that no outstanding requests match the given matcher, and throw an error\n   * if any do.\n   */\n  expectNone(match, description) {\n    description ||= this.descriptionFromMatcher(match);\n    const matches = this.match(match);\n    if (matches.length > 0) {\n      throw new Error(`Expected zero matching requests for criteria \"${description}\", found ${matches.length}.`);\n    }\n  }\n  /**\n   * Validate that there are no outstanding requests.\n   */\n  verify(opts = {}) {\n    let open = this.open;\n    // It's possible that some requests may be cancelled, and this is expected.\n    // The user can ask to ignore open requests which have been cancelled.\n    if (opts.ignoreCancelled) {\n      open = open.filter(testReq => !testReq.cancelled);\n    }\n    if (open.length > 0) {\n      // Show the methods and URLs of open requests in the error, for convenience.\n      const requests = open.map(describeRequest).join(', ');\n      throw new Error(`Expected no open requests, found ${open.length}: ${requests}`);\n    }\n  }\n  descriptionFromMatcher(matcher) {\n    if (typeof matcher === 'string') {\n      return `Match URL: ${matcher}`;\n    } else if (typeof matcher === 'object') {\n      const method = matcher.method || '(any)';\n      const url = matcher.url || '(any)';\n      return `Match method: ${method}, URL: ${url}`;\n    } else {\n      return `Match by function: ${matcher.name}`;\n    }\n  }\n  static ɵfac = i0.ɵɵngDeclareFactory({\n    minVersion: \"12.0.0\",\n    version: \"19.2.14\",\n    ngImport: i0,\n    type: HttpClientTestingBackend,\n    deps: [],\n    target: i0.ɵɵFactoryTarget.Injectable\n  });\n  static ɵprov = i0.ɵɵngDeclareInjectable({\n    minVersion: \"12.0.0\",\n    version: \"19.2.14\",\n    ngImport: i0,\n    type: HttpClientTestingBackend\n  });\n}\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"19.2.14\",\n  ngImport: i0,\n  type: HttpClientTestingBackend,\n  decorators: [{\n    type: Injectable\n  }]\n});\nfunction describeRequest(testRequest) {\n  const url = testRequest.request.urlWithParams;\n  const method = testRequest.request.method;\n  return `${method} ${url}`;\n}\nfunction provideHttpClientTesting() {\n  return [HttpClientTestingBackend, {\n    provide: HttpBackend,\n    useExisting: HttpClientTestingBackend\n  }, {\n    provide: HttpTestingController,\n    useExisting: HttpClientTestingBackend\n  }, {\n    provide: REQUESTS_CONTRIBUTE_TO_STABILITY,\n    useValue: false\n  }];\n}\n\n/**\n * Configures `HttpClientTestingBackend` as the `HttpBackend` used by `HttpClient`.\n *\n * Inject `HttpTestingController` to expect and flush requests in your tests.\n *\n * @publicApi\n *\n * @deprecated Add `provideHttpClientTesting()` to your providers instead.\n */\nclass HttpClientTestingModule {\n  static ɵfac = i0.ɵɵngDeclareFactory({\n    minVersion: \"12.0.0\",\n    version: \"19.2.14\",\n    ngImport: i0,\n    type: HttpClientTestingModule,\n    deps: [],\n    target: i0.ɵɵFactoryTarget.NgModule\n  });\n  static ɵmod = i0.ɵɵngDeclareNgModule({\n    minVersion: \"14.0.0\",\n    version: \"19.2.14\",\n    ngImport: i0,\n    type: HttpClientTestingModule,\n    imports: [HttpClientModule]\n  });\n  static ɵinj = i0.ɵɵngDeclareInjector({\n    minVersion: \"12.0.0\",\n    version: \"19.2.14\",\n    ngImport: i0,\n    type: HttpClientTestingModule,\n    providers: [provideHttpClientTesting()],\n    imports: [HttpClientModule]\n  });\n}\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"19.2.14\",\n  ngImport: i0,\n  type: HttpClientTestingModule,\n  decorators: [{\n    type: NgModule,\n    args: [{\n      imports: [HttpClientModule],\n      providers: [provideHttpClientTesting()]\n    }]\n  }]\n});\nexport { HttpClientTestingModule, HttpTestingController, TestRequest, provideHttpClientTesting };\n"],"mappings":"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","names":[],"x_google_ignoreList":[0]}