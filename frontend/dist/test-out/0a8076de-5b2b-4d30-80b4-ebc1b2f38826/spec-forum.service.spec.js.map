{
  "version": 3,
  "sources": ["src/app/services/forum.service.spec.ts"],
  "sourcesContent": ["import { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { HttpHeaders } from '@angular/common/http';\nimport { ForumService } from './forum.service';\nimport { AuthService } from './auth.service';\nimport { ForumThread, ForumPost, CreateThreadRequest, CreatePostRequest } from '../models/forum.model';\nimport { User } from '../models/user.model';\nimport { of } from 'rxjs';\n\ndescribe('ForumService', () => {\n  let service: ForumService;\n  let httpMock: HttpTestingController;\n  let mockAuthService: jasmine.SpyObj<AuthService>;\n  const baseUrl = 'http://localhost:8080/api/forums';\n\n  const mockUser: User = {\n    id: 1,\n    username: 'testuser',\n    email: 'test@example.com',\n    avatarUrl: undefined,\n    provider: 'local',\n    roles: ['USER']\n  };\n\n  beforeEach(() => {\n    const authServiceSpy = jasmine.createSpyObj('AuthService', [\n      'getAuthenticatedHeaders',\n      'getToken',\n      'isAuthenticated'\n    ]);\n\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      providers: [\n        ForumService,\n        { provide: AuthService, useValue: authServiceSpy }\n      ]\n    });\n    service = TestBed.inject(ForumService);\n    httpMock = TestBed.inject(HttpTestingController);\n    mockAuthService = TestBed.inject(AuthService) as jasmine.SpyObj<AuthService>;\n  });\n\n  afterEach(() => {\n    httpMock.verify();\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n\n  describe('getThreads', () => {\n    it('should fetch threads without category', () => {\n      const mockResponse = {\n        content: [\n          {\n            id: 1,\n            title: 'Test Thread',\n            author: mockUser,\n            isPinned: false,\n            isLocked: false,\n            postCount: 5,\n            lastActivity: '2024-01-01T00:00:00',\n            createdAt: '2024-01-01T00:00:00',\n            updatedAt: '2024-01-01T00:00:00'\n          }\n        ],\n        totalElements: 1,\n        totalPages: 1,\n        size: 20,\n        number: 0,\n        first: true,\n        last: true\n      };\n\n      service.getThreads(0, 20).subscribe(response => {\n        expect(response).toEqual(mockResponse);\n        expect(response.content.length).toBe(1);\n        expect(response.content[0].title).toBe('Test Thread');\n      });\n\n      const req = httpMock.expectOne(`${baseUrl}/threads?page=0&size=20`);\n      expect(req.request.method).toBe('GET');\n      req.flush(mockResponse);\n    });\n\n    it('should fetch threads with search query', () => {\n      const searchQuery = 'test search query';\n      const mockResponse = {\n        content: [],\n        totalElements: 0,\n        totalPages: 0,\n        size: 20,\n        number: 0,\n        first: true,\n        last: true\n      };\n\n      service.getThreads(0, 20, searchQuery).subscribe(response => {\n        expect(response).toEqual(mockResponse);\n      });\n\n      const req = httpMock.expectOne(`${baseUrl}/threads?page=0&size=20&search=${encodeURIComponent(searchQuery)}`);\n      expect(req.request.method).toBe('GET');\n      req.flush(mockResponse);\n    });\n\n    it('should handle error when fetching threads', () => {\n      service.getThreads(0, 20).subscribe({\n        next: () => fail('should have failed'),\n        error: (error) => {\n          expect(error.status).toBe(500);\n        }\n      });\n\n      const req = httpMock.expectOne(`${baseUrl}/threads?page=0&size=20`);\n      req.flush('Server Error', { status: 500, statusText: 'Internal Server Error' });\n      httpMock.verify();\n    });\n  });\n\n  describe('createThread', () => {\n    it('should create a new thread', () => {\n      const createRequest: CreateThreadRequest = {\n        title: 'New Thread',\n        content: 'Thread content'\n      };\n\n      const mockResponse: ForumThread = {\n        id: 1,\n        title: 'New Thread',\n        author: mockUser,\n        isPinned: false,\n        isLocked: false,\n        postCount: 1,\n        lastActivity: '2024-01-01T00:00:00',\n        createdAt: '2024-01-01T00:00:00',\n        updatedAt: '2024-01-01T00:00:00'\n      };\n\n      // Mock authentication\n      mockAuthService.getAuthenticatedHeaders.and.returnValue(\n        new HttpHeaders().set('Authorization', 'Bearer jwt-token')\n      );\n\n      service.createThread(createRequest).subscribe(response => {\n        expect(response).toEqual(mockResponse);\n        expect(response.title).toBe('New Thread');\n      });\n\n      const req = httpMock.expectOne(`${baseUrl}/threads`);\n      expect(req.request.method).toBe('POST');\n      expect(req.request.body).toEqual(createRequest);\n      req.flush(mockResponse);\n    });\n\n    it('should handle error when creating thread', () => {\n      const createRequest: CreateThreadRequest = {\n        title: '',\n        content: 'Thread content'\n      };\n\n      service.createThread(createRequest).subscribe({\n        next: () => fail('should have failed'),\n        error: (error) => {\n          expect(error.message).toBe('Thread title is required');\n        }\n      });\n\n      // No HTTP request should be made for invalid input\n      httpMock.expectNone(`${baseUrl}/threads`);\n      httpMock.verify();\n    });\n  });\n\n  describe('getThreadPosts', () => {\n    it('should fetch posts for a thread', () => {\n      const threadId = 1;\n      const mockThread: ForumThread = {\n        id: threadId,\n        title: 'Test Thread',\n        author: mockUser,\n        isPinned: false,\n        isLocked: false,\n        postCount: 2,\n        lastActivity: '2024-01-01T01:00:00',\n        createdAt: '2024-01-01T00:00:00'\n      };\n      \n      const mockPosts: ForumPost[] = [\n        {\n          id: 1,\n          content: 'First post',\n          author: mockUser,\n          thread: mockThread,\n          createdAt: '2024-01-01T00:00:00'\n        },\n        {\n          id: 2,\n          content: 'Second post',\n          author: { ...mockUser, id: 2, username: 'testuser2' },\n          thread: mockThread,\n          createdAt: '2024-01-01T01:00:00'\n        }\n      ];\n\n      const mockResponse = {\n        content: mockPosts,\n        totalElements: 2,\n        totalPages: 1,\n        size: 20,\n        number: 0,\n        first: true,\n        last: true\n      };\n\n      service.getThreadPosts(threadId).subscribe(response => {\n        expect(response).toEqual(mockResponse);\n        expect(response.content.length).toBe(2);\n        expect(response.content[0].content).toBe('First post');\n      });\n\n      const req = httpMock.expectOne(`${baseUrl}/threads/${threadId}/posts?page=0&size=20`);\n      expect(req.request.method).toBe('GET');\n      req.flush(mockResponse);\n    });\n\n    it('should handle error when thread not found', () => {\n      const threadId = 999;\n\n      service.getThreadPosts(threadId).subscribe({\n        next: () => fail('should have failed'),\n        error: (error) => {\n          expect(error).toBeTruthy();\n        }\n      });\n\n      const req = httpMock.expectOne(`${baseUrl}/threads/${threadId}/posts?page=0&size=20`);\n      req.flush('Not Found', { status: 404, statusText: 'Not Found' });\n      httpMock.verify();\n    });\n  });\n\n  describe('createPost', () => {\n    it('should create a new post', () => {\n      const threadId = 1;\n      const createRequest: CreatePostRequest = {\n        content: 'New post content'\n      };\n\n      const mockThread: ForumThread = {\n        id: threadId,\n        title: 'Test Thread',\n        author: mockUser,\n        isPinned: false,\n        isLocked: false,\n        postCount: 1,\n        lastActivity: '2024-01-01T02:00:00',\n        createdAt: '2024-01-01T00:00:00'\n      };\n\n      const mockResponse: ForumPost = {\n        id: 3,\n        content: 'New post content',\n        author: mockUser,\n        thread: mockThread,\n        createdAt: '2024-01-01T02:00:00'\n      };\n\n      service.createPost(threadId, createRequest).subscribe(response => {\n        expect(response).toEqual(mockResponse);\n        expect(response.content).toBe('New post content');\n      });\n\n      const req = httpMock.expectOne(`${baseUrl}/threads/${threadId}/posts`);\n      expect(req.request.method).toBe('POST');\n      expect(req.request.body).toEqual(createRequest);\n      req.flush(mockResponse);\n    });\n\n    it('should handle error when creating post without authentication', () => {\n      const threadId = 1;\n      const createRequest: CreatePostRequest = {\n        content: 'New post content'\n      };\n\n      service.createPost(threadId, createRequest).subscribe({\n        next: () => fail('should have failed'),\n        error: (error) => {\n          expect(error).toBeTruthy();\n        }\n      });\n\n      const req = httpMock.expectOne(`${baseUrl}/threads/${threadId}/posts`);\n      req.flush('Unauthorized', { status: 401, statusText: 'Unauthorized' });\n    });\n  });\n\n  describe('error handling', () => {\n    it('should handle network errors', () => {\n      service.getThreads(0, 20).subscribe({\n        next: () => fail('should have failed'),\n        error: (error) => {\n          expect(error).toBeTruthy();\n        }\n      });\n\n      const req = httpMock.expectOne(`${baseUrl}/threads?page=0&size=20`);\n      req.error(new ErrorEvent('Network error'));\n      httpMock.verify();\n    });\n  });\n});"],
  "mappings": "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",
  "names": ["init_testing"]
}
