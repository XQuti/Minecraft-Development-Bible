name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Backend Build and Test
  backend:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: minecraft_dev_bible_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
    
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Make gradlew executable
      run: chmod +x ./backend/gradlew
      
    - name: Build backend
      run: |
        cd backend
        ./gradlew build
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: minecraft_dev_bible_test
        DB_USERNAME: postgres
        DB_PASSWORD: password
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        JWT_SECRET: test-secret-key-for-ci-pipeline-testing-purposes-only
    
    # Temporarily disabled until tests are fixed
    # - name: Run backend tests
    #   run: |
    #     cd backend
    #     ./gradlew test
    #   env:
    #     DB_HOST: localhost
    #     DB_PORT: 5432
    #     DB_NAME: minecraft_dev_bible_test
    #     DB_USERNAME: postgres
    #     DB_PASSWORD: password
    #     REDIS_HOST: localhost
    #     REDIS_PORT: 6379
    #     JWT_SECRET: test-secret-key-for-ci-pipeline-testing-purposes-only

  # Frontend Build and Test
  frontend:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
    
    - name: Install dependencies
      run: |
        cd frontend
        bun install
    
    - name: Lint frontend
      run: |
        cd frontend
        bun run lint
    
    - name: Build frontend
      run: |
        cd frontend
        bun run build
    
    # Temporarily disabled until tests are fixed
    # - name: Run frontend tests
    #   run: |
    #     cd frontend
    #     bun run test:ci

  # Docker Build Test (only on main branch)
  docker-build:
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build backend Docker image
      run: |
        cd backend
        docker build -t mdb-backend:test .
    
    - name: Build frontend Docker image
      run: |
        cd frontend
        docker build -t mdb-frontend:test .
    
    - name: Test Docker Compose
      run: |
        # Create a test environment file
        echo "GOOGLE_CLIENT_ID=test" > .env
        echo "GOOGLE_CLIENT_SECRET=test" >> .env
        echo "GITHUB_CLIENT_ID=test" >> .env
        echo "GITHUB_CLIENT_SECRET=test" >> .env
        
        # Test that docker-compose can start services
        docker-compose config