{"version":3,"sources":["node_modules/@angular/common/fesm2022/testing.mjs"],"sourcesContent":["/**\n * @license Angular v19.2.14\n * (c) 2010-2025 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { ɵnormalizeQueryParams as _normalizeQueryParams, LocationStrategy } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, inject, Inject, Optional, Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { PlatformNavigation } from './platform_navigation-B45Jeakb.mjs';\nimport { ɵFakeNavigation as _FakeNavigation } from '@angular/core/testing';\nexport { ɵFakeNavigation } from '@angular/core/testing';\nimport { PlatformLocation, Location, LocationStrategy as LocationStrategy$1 } from './location-Dq4mJT-A.mjs';\nimport { DOCUMENT } from './dom_tokens-rA0ACyx7.mjs';\n\n/**\n * Parser from https://tools.ietf.org/html/rfc3986#appendix-B\n * ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?\n *  12            3  4          5       6  7        8 9\n *\n * Example: http://www.ics.uci.edu/pub/ietf/uri/#Related\n *\n * Results in:\n *\n * $1 = http:\n * $2 = http\n * $3 = //www.ics.uci.edu\n * $4 = www.ics.uci.edu\n * $5 = /pub/ietf/uri/\n * $6 = <undefined>\n * $7 = <undefined>\n * $8 = #Related\n * $9 = Related\n */\nconst urlParse = /^(([^:\\/?#]+):)?(\\/\\/([^\\/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?/;\nfunction parseUrl(urlStr, baseHref) {\n  const verifyProtocol = /^((http[s]?|ftp):\\/\\/)/;\n  let serverBase;\n  // URL class requires full URL. If the URL string doesn't start with protocol, we need to add\n  // an arbitrary base URL which can be removed afterward.\n  if (!verifyProtocol.test(urlStr)) {\n    serverBase = 'http://empty.com/';\n  }\n  let parsedUrl;\n  try {\n    parsedUrl = new URL(urlStr, serverBase);\n  } catch (e) {\n    const result = urlParse.exec(serverBase || '' + urlStr);\n    if (!result) {\n      throw new Error(`Invalid URL: ${urlStr} with base: ${baseHref}`);\n    }\n    const hostSplit = result[4].split(':');\n    parsedUrl = {\n      protocol: result[1],\n      hostname: hostSplit[0],\n      port: hostSplit[1] || '',\n      pathname: result[5],\n      search: result[6],\n      hash: result[8]\n    };\n  }\n  if (parsedUrl.pathname && parsedUrl.pathname.indexOf(baseHref) === 0) {\n    parsedUrl.pathname = parsedUrl.pathname.substring(baseHref.length);\n  }\n  return {\n    hostname: !serverBase && parsedUrl.hostname || '',\n    protocol: !serverBase && parsedUrl.protocol || '',\n    port: !serverBase && parsedUrl.port || '',\n    pathname: parsedUrl.pathname || '/',\n    search: parsedUrl.search || '',\n    hash: parsedUrl.hash || ''\n  };\n}\n/**\n * Provider for mock platform location config\n *\n * @publicApi\n */\nconst MOCK_PLATFORM_LOCATION_CONFIG = new InjectionToken('MOCK_PLATFORM_LOCATION_CONFIG');\n/**\n * Mock implementation of URL state.\n *\n * @publicApi\n */\nclass MockPlatformLocation {\n  baseHref = '';\n  hashUpdate = new Subject();\n  popStateSubject = new Subject();\n  urlChangeIndex = 0;\n  urlChanges = [{\n    hostname: '',\n    protocol: '',\n    port: '',\n    pathname: '/',\n    search: '',\n    hash: '',\n    state: null\n  }];\n  constructor(config) {\n    if (config) {\n      this.baseHref = config.appBaseHref || '';\n      const parsedChanges = this.parseChanges(null, config.startUrl || 'http://_empty_/', this.baseHref);\n      this.urlChanges[0] = {\n        ...parsedChanges\n      };\n    }\n  }\n  get hostname() {\n    return this.urlChanges[this.urlChangeIndex].hostname;\n  }\n  get protocol() {\n    return this.urlChanges[this.urlChangeIndex].protocol;\n  }\n  get port() {\n    return this.urlChanges[this.urlChangeIndex].port;\n  }\n  get pathname() {\n    return this.urlChanges[this.urlChangeIndex].pathname;\n  }\n  get search() {\n    return this.urlChanges[this.urlChangeIndex].search;\n  }\n  get hash() {\n    return this.urlChanges[this.urlChangeIndex].hash;\n  }\n  get state() {\n    return this.urlChanges[this.urlChangeIndex].state;\n  }\n  getBaseHrefFromDOM() {\n    return this.baseHref;\n  }\n  onPopState(fn) {\n    const subscription = this.popStateSubject.subscribe(fn);\n    return () => subscription.unsubscribe();\n  }\n  onHashChange(fn) {\n    const subscription = this.hashUpdate.subscribe(fn);\n    return () => subscription.unsubscribe();\n  }\n  get href() {\n    let url = `${this.protocol}//${this.hostname}${this.port ? ':' + this.port : ''}`;\n    url += `${this.pathname === '/' ? '' : this.pathname}${this.search}${this.hash}`;\n    return url;\n  }\n  get url() {\n    return `${this.pathname}${this.search}${this.hash}`;\n  }\n  parseChanges(state, url, baseHref = '') {\n    // When the `history.state` value is stored, it is always copied.\n    state = JSON.parse(JSON.stringify(state));\n    return {\n      ...parseUrl(url, baseHref),\n      state\n    };\n  }\n  replaceState(state, title, newUrl) {\n    const {\n      pathname,\n      search,\n      state: parsedState,\n      hash\n    } = this.parseChanges(state, newUrl);\n    this.urlChanges[this.urlChangeIndex] = {\n      ...this.urlChanges[this.urlChangeIndex],\n      pathname,\n      search,\n      hash,\n      state: parsedState\n    };\n  }\n  pushState(state, title, newUrl) {\n    const {\n      pathname,\n      search,\n      state: parsedState,\n      hash\n    } = this.parseChanges(state, newUrl);\n    if (this.urlChangeIndex > 0) {\n      this.urlChanges.splice(this.urlChangeIndex + 1);\n    }\n    this.urlChanges.push({\n      ...this.urlChanges[this.urlChangeIndex],\n      pathname,\n      search,\n      hash,\n      state: parsedState\n    });\n    this.urlChangeIndex = this.urlChanges.length - 1;\n  }\n  forward() {\n    const oldUrl = this.url;\n    const oldHash = this.hash;\n    if (this.urlChangeIndex < this.urlChanges.length) {\n      this.urlChangeIndex++;\n    }\n    this.emitEvents(oldHash, oldUrl);\n  }\n  back() {\n    const oldUrl = this.url;\n    const oldHash = this.hash;\n    if (this.urlChangeIndex > 0) {\n      this.urlChangeIndex--;\n    }\n    this.emitEvents(oldHash, oldUrl);\n  }\n  historyGo(relativePosition = 0) {\n    const oldUrl = this.url;\n    const oldHash = this.hash;\n    const nextPageIndex = this.urlChangeIndex + relativePosition;\n    if (nextPageIndex >= 0 && nextPageIndex < this.urlChanges.length) {\n      this.urlChangeIndex = nextPageIndex;\n    }\n    this.emitEvents(oldHash, oldUrl);\n  }\n  getState() {\n    return this.state;\n  }\n  /**\n   * Browsers are inconsistent in when they fire events and perform the state updates\n   * The most easiest thing to do in our mock is synchronous and that happens to match\n   * Firefox and Chrome, at least somewhat closely\n   *\n   * https://github.com/WICG/navigation-api#watching-for-navigations\n   * https://docs.google.com/document/d/1Pdve-DJ1JCGilj9Yqf5HxRJyBKSel5owgOvUJqTauwU/edit#heading=h.3ye4v71wsz94\n   * popstate is always sent before hashchange:\n   * https://developer.mozilla.org/en-US/docs/Web/API/Window/popstate_event#when_popstate_is_sent\n   */\n  emitEvents(oldHash, oldUrl) {\n    this.popStateSubject.next({\n      type: 'popstate',\n      state: this.getState(),\n      oldUrl,\n      newUrl: this.url\n    });\n    if (oldHash !== this.hash) {\n      this.hashUpdate.next({\n        type: 'hashchange',\n        state: null,\n        oldUrl,\n        newUrl: this.url\n      });\n    }\n  }\n  static ɵfac = i0.ɵɵngDeclareFactory({\n    minVersion: \"12.0.0\",\n    version: \"19.2.14\",\n    ngImport: i0,\n    type: MockPlatformLocation,\n    deps: [{\n      token: MOCK_PLATFORM_LOCATION_CONFIG,\n      optional: true\n    }],\n    target: i0.ɵɵFactoryTarget.Injectable\n  });\n  static ɵprov = i0.ɵɵngDeclareInjectable({\n    minVersion: \"12.0.0\",\n    version: \"19.2.14\",\n    ngImport: i0,\n    type: MockPlatformLocation\n  });\n}\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"19.2.14\",\n  ngImport: i0,\n  type: MockPlatformLocation,\n  decorators: [{\n    type: Injectable\n  }],\n  ctorParameters: () => [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MOCK_PLATFORM_LOCATION_CONFIG]\n    }, {\n      type: Optional\n    }]\n  }]\n});\n/**\n * Mock implementation of URL state.\n */\nclass FakeNavigationPlatformLocation {\n  _platformNavigation;\n  constructor() {\n    const platformNavigation = inject(PlatformNavigation);\n    if (!(platformNavigation instanceof _FakeNavigation)) {\n      throw new Error('FakePlatformNavigation cannot be used without FakeNavigation. Use ' + '`provideFakeNavigation` to have all these services provided together.');\n    }\n    this._platformNavigation = platformNavigation;\n  }\n  config = inject(MOCK_PLATFORM_LOCATION_CONFIG, {\n    optional: true\n  });\n  getBaseHrefFromDOM() {\n    return this.config?.appBaseHref ?? '';\n  }\n  onPopState(fn) {\n    this._platformNavigation.window.addEventListener('popstate', fn);\n    return () => this._platformNavigation.window.removeEventListener('popstate', fn);\n  }\n  onHashChange(fn) {\n    this._platformNavigation.window.addEventListener('hashchange', fn);\n    return () => this._platformNavigation.window.removeEventListener('hashchange', fn);\n  }\n  get href() {\n    return this._platformNavigation.currentEntry.url;\n  }\n  get protocol() {\n    return new URL(this._platformNavigation.currentEntry.url).protocol;\n  }\n  get hostname() {\n    return new URL(this._platformNavigation.currentEntry.url).hostname;\n  }\n  get port() {\n    return new URL(this._platformNavigation.currentEntry.url).port;\n  }\n  get pathname() {\n    return new URL(this._platformNavigation.currentEntry.url).pathname;\n  }\n  get search() {\n    return new URL(this._platformNavigation.currentEntry.url).search;\n  }\n  get hash() {\n    return new URL(this._platformNavigation.currentEntry.url).hash;\n  }\n  pushState(state, title, url) {\n    this._platformNavigation.pushState(state, title, url);\n  }\n  replaceState(state, title, url) {\n    this._platformNavigation.replaceState(state, title, url);\n  }\n  forward() {\n    this._platformNavigation.forward();\n  }\n  back() {\n    this._platformNavigation.back();\n  }\n  historyGo(relativePosition = 0) {\n    this._platformNavigation.go(relativePosition);\n  }\n  getState() {\n    return this._platformNavigation.currentEntry.getHistoryState();\n  }\n  static ɵfac = i0.ɵɵngDeclareFactory({\n    minVersion: \"12.0.0\",\n    version: \"19.2.14\",\n    ngImport: i0,\n    type: FakeNavigationPlatformLocation,\n    deps: [],\n    target: i0.ɵɵFactoryTarget.Injectable\n  });\n  static ɵprov = i0.ɵɵngDeclareInjectable({\n    minVersion: \"12.0.0\",\n    version: \"19.2.14\",\n    ngImport: i0,\n    type: FakeNavigationPlatformLocation\n  });\n}\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"19.2.14\",\n  ngImport: i0,\n  type: FakeNavigationPlatformLocation,\n  decorators: [{\n    type: Injectable\n  }],\n  ctorParameters: () => []\n});\nconst FAKE_NAVIGATION = new InjectionToken('fakeNavigation', {\n  providedIn: 'root',\n  factory: () => {\n    const config = inject(MOCK_PLATFORM_LOCATION_CONFIG, {\n      optional: true\n    });\n    const baseFallback = 'http://_empty_/';\n    const startUrl = new URL(config?.startUrl || baseFallback, baseFallback);\n    // TODO(atscott): If we want to replace MockPlatformLocation with FakeNavigationPlatformLocation\n    // as the default in TestBed, we will likely need to use setSynchronousTraversalsForTesting(true);\n    return new _FakeNavigation(inject(DOCUMENT), startUrl.href);\n  }\n});\n/**\n * Return a provider for the `FakeNavigation` in place of the real Navigation API.\n */\nfunction provideFakePlatformNavigation() {\n  return [{\n    provide: PlatformNavigation,\n    useFactory: () => inject(FAKE_NAVIGATION)\n  }, {\n    provide: PlatformLocation,\n    useClass: FakeNavigationPlatformLocation\n  }];\n}\n\n/**\n * A spy for {@link Location} that allows tests to fire simulated location events.\n *\n * @publicApi\n */\nclass SpyLocation {\n  urlChanges = [];\n  _history = [new LocationState('', '', null)];\n  _historyIndex = 0;\n  /** @internal */\n  _subject = new Subject();\n  /** @internal */\n  _basePath = '';\n  /** @internal */\n  _locationStrategy = null;\n  /** @internal */\n  _urlChangeListeners = [];\n  /** @internal */\n  _urlChangeSubscription = null;\n  /** @docs-private */\n  ngOnDestroy() {\n    this._urlChangeSubscription?.unsubscribe();\n    this._urlChangeListeners = [];\n  }\n  setInitialPath(url) {\n    this._history[this._historyIndex].path = url;\n  }\n  setBaseHref(url) {\n    this._basePath = url;\n  }\n  path() {\n    return this._history[this._historyIndex].path;\n  }\n  getState() {\n    return this._history[this._historyIndex].state;\n  }\n  isCurrentPathEqualTo(path, query = '') {\n    const givenPath = path.endsWith('/') ? path.substring(0, path.length - 1) : path;\n    const currPath = this.path().endsWith('/') ? this.path().substring(0, this.path().length - 1) : this.path();\n    return currPath == givenPath + (query.length > 0 ? '?' + query : '');\n  }\n  simulateUrlPop(pathname) {\n    this._subject.next({\n      'url': pathname,\n      'pop': true,\n      'type': 'popstate'\n    });\n  }\n  simulateHashChange(pathname) {\n    const path = this.prepareExternalUrl(pathname);\n    this.pushHistory(path, '', null);\n    this.urlChanges.push('hash: ' + pathname);\n    // the browser will automatically fire popstate event before each `hashchange` event, so we need\n    // to simulate it.\n    this._subject.next({\n      'url': pathname,\n      'pop': true,\n      'type': 'popstate'\n    });\n    this._subject.next({\n      'url': pathname,\n      'pop': true,\n      'type': 'hashchange'\n    });\n  }\n  prepareExternalUrl(url) {\n    if (url.length > 0 && !url.startsWith('/')) {\n      url = '/' + url;\n    }\n    return this._basePath + url;\n  }\n  go(path, query = '', state = null) {\n    path = this.prepareExternalUrl(path);\n    this.pushHistory(path, query, state);\n    const locationState = this._history[this._historyIndex - 1];\n    if (locationState.path == path && locationState.query == query) {\n      return;\n    }\n    const url = path + (query.length > 0 ? '?' + query : '');\n    this.urlChanges.push(url);\n    this._notifyUrlChangeListeners(path + _normalizeQueryParams(query), state);\n  }\n  replaceState(path, query = '', state = null) {\n    path = this.prepareExternalUrl(path);\n    const history = this._history[this._historyIndex];\n    history.state = state;\n    if (history.path == path && history.query == query) {\n      return;\n    }\n    history.path = path;\n    history.query = query;\n    const url = path + (query.length > 0 ? '?' + query : '');\n    this.urlChanges.push('replace: ' + url);\n    this._notifyUrlChangeListeners(path + _normalizeQueryParams(query), state);\n  }\n  forward() {\n    if (this._historyIndex < this._history.length - 1) {\n      this._historyIndex++;\n      this._subject.next({\n        'url': this.path(),\n        'state': this.getState(),\n        'pop': true,\n        'type': 'popstate'\n      });\n    }\n  }\n  back() {\n    if (this._historyIndex > 0) {\n      this._historyIndex--;\n      this._subject.next({\n        'url': this.path(),\n        'state': this.getState(),\n        'pop': true,\n        'type': 'popstate'\n      });\n    }\n  }\n  historyGo(relativePosition = 0) {\n    const nextPageIndex = this._historyIndex + relativePosition;\n    if (nextPageIndex >= 0 && nextPageIndex < this._history.length) {\n      this._historyIndex = nextPageIndex;\n      this._subject.next({\n        'url': this.path(),\n        'state': this.getState(),\n        'pop': true,\n        'type': 'popstate'\n      });\n    }\n  }\n  onUrlChange(fn) {\n    this._urlChangeListeners.push(fn);\n    this._urlChangeSubscription ??= this.subscribe(v => {\n      this._notifyUrlChangeListeners(v.url, v.state);\n    });\n    return () => {\n      const fnIndex = this._urlChangeListeners.indexOf(fn);\n      this._urlChangeListeners.splice(fnIndex, 1);\n      if (this._urlChangeListeners.length === 0) {\n        this._urlChangeSubscription?.unsubscribe();\n        this._urlChangeSubscription = null;\n      }\n    };\n  }\n  /** @internal */\n  _notifyUrlChangeListeners(url = '', state) {\n    this._urlChangeListeners.forEach(fn => fn(url, state));\n  }\n  subscribe(onNext, onThrow, onReturn) {\n    return this._subject.subscribe({\n      next: onNext,\n      error: onThrow ?? undefined,\n      complete: onReturn ?? undefined\n    });\n  }\n  normalize(url) {\n    return null;\n  }\n  pushHistory(path, query, state) {\n    if (this._historyIndex > 0) {\n      this._history.splice(this._historyIndex + 1);\n    }\n    this._history.push(new LocationState(path, query, state));\n    this._historyIndex = this._history.length - 1;\n  }\n  static ɵfac = i0.ɵɵngDeclareFactory({\n    minVersion: \"12.0.0\",\n    version: \"19.2.14\",\n    ngImport: i0,\n    type: SpyLocation,\n    deps: [],\n    target: i0.ɵɵFactoryTarget.Injectable\n  });\n  static ɵprov = i0.ɵɵngDeclareInjectable({\n    minVersion: \"12.0.0\",\n    version: \"19.2.14\",\n    ngImport: i0,\n    type: SpyLocation\n  });\n}\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"19.2.14\",\n  ngImport: i0,\n  type: SpyLocation,\n  decorators: [{\n    type: Injectable\n  }]\n});\nclass LocationState {\n  path;\n  query;\n  state;\n  constructor(path, query, state) {\n    this.path = path;\n    this.query = query;\n    this.state = state;\n  }\n}\n\n/**\n * A mock implementation of {@link LocationStrategy} that allows tests to fire simulated\n * location events.\n *\n * @publicApi\n */\nclass MockLocationStrategy extends LocationStrategy {\n  internalBaseHref = '/';\n  internalPath = '/';\n  internalTitle = '';\n  urlChanges = [];\n  /** @internal */\n  _subject = new Subject();\n  stateChanges = [];\n  constructor() {\n    super();\n  }\n  simulatePopState(url) {\n    this.internalPath = url;\n    this._subject.next(new _MockPopStateEvent(this.path()));\n  }\n  path(includeHash = false) {\n    return this.internalPath;\n  }\n  prepareExternalUrl(internal) {\n    if (internal.startsWith('/') && this.internalBaseHref.endsWith('/')) {\n      return this.internalBaseHref + internal.substring(1);\n    }\n    return this.internalBaseHref + internal;\n  }\n  pushState(ctx, title, path, query) {\n    // Add state change to changes array\n    this.stateChanges.push(ctx);\n    this.internalTitle = title;\n    const url = path + (query.length > 0 ? '?' + query : '');\n    this.internalPath = url;\n    const externalUrl = this.prepareExternalUrl(url);\n    this.urlChanges.push(externalUrl);\n  }\n  replaceState(ctx, title, path, query) {\n    // Reset the last index of stateChanges to the ctx (state) object\n    this.stateChanges[(this.stateChanges.length || 1) - 1] = ctx;\n    this.internalTitle = title;\n    const url = path + (query.length > 0 ? '?' + query : '');\n    this.internalPath = url;\n    const externalUrl = this.prepareExternalUrl(url);\n    this.urlChanges.push('replace: ' + externalUrl);\n  }\n  onPopState(fn) {\n    this._subject.subscribe({\n      next: fn\n    });\n  }\n  getBaseHref() {\n    return this.internalBaseHref;\n  }\n  back() {\n    if (this.urlChanges.length > 0) {\n      this.urlChanges.pop();\n      this.stateChanges.pop();\n      const nextUrl = this.urlChanges.length > 0 ? this.urlChanges[this.urlChanges.length - 1] : '';\n      this.simulatePopState(nextUrl);\n    }\n  }\n  forward() {\n    throw 'not implemented';\n  }\n  getState() {\n    return this.stateChanges[(this.stateChanges.length || 1) - 1];\n  }\n  static ɵfac = i0.ɵɵngDeclareFactory({\n    minVersion: \"12.0.0\",\n    version: \"19.2.14\",\n    ngImport: i0,\n    type: MockLocationStrategy,\n    deps: [],\n    target: i0.ɵɵFactoryTarget.Injectable\n  });\n  static ɵprov = i0.ɵɵngDeclareInjectable({\n    minVersion: \"12.0.0\",\n    version: \"19.2.14\",\n    ngImport: i0,\n    type: MockLocationStrategy\n  });\n}\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"19.2.14\",\n  ngImport: i0,\n  type: MockLocationStrategy,\n  decorators: [{\n    type: Injectable\n  }],\n  ctorParameters: () => []\n});\nclass _MockPopStateEvent {\n  newUrl;\n  pop = true;\n  type = 'popstate';\n  constructor(newUrl) {\n    this.newUrl = newUrl;\n  }\n}\n\n/**\n * Returns mock providers for the `Location` and `LocationStrategy` classes.\n * The mocks are helpful in tests to fire simulated location events.\n *\n * @publicApi\n */\nfunction provideLocationMocks() {\n  return [{\n    provide: Location,\n    useClass: SpyLocation\n  }, {\n    provide: LocationStrategy$1,\n    useClass: MockLocationStrategy\n  }];\n}\nexport { MOCK_PLATFORM_LOCATION_CONFIG, MockLocationStrategy, MockPlatformLocation, SpyLocation, provideLocationMocks, provideFakePlatformNavigation as ɵprovideFakePlatformNavigation };\n"],"mappings":"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","names":["init_testing"],"x_google_ignoreList":[0]}