{
  "version": 3,
  "sources": ["src/app/services/tutorial.service.spec.ts", "src/app/services/tutorial.service.ts"],
  "sourcesContent": ["import { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { TutorialService } from './tutorial.service';\nimport { TutorialModule, TutorialLesson } from '../models/tutorial.model';\n\ndescribe('TutorialService', () => {\n  let service: TutorialService;\n  let httpMock: HttpTestingController;\n\n  const mockTutorialModule: TutorialModule = {\n    id: 1,\n    title: 'Getting Started',\n    description: 'Learn the basics of Minecraft development',\n    order: 1,\n    isPublished: true,\n    createdAt: '2024-01-01T00:00:00Z',\n    updatedAt: '2024-01-01T00:00:00Z',\n    lessons: []\n  };\n\n  const mockTutorialLesson: TutorialLesson = {\n    id: 1,\n    title: 'Introduction to Minecraft Modding',\n    content: 'This lesson covers the basics...',\n    videoUrl: 'https://example.com/video1',\n    order: 1,\n    isPublished: true,\n    module: mockTutorialModule,\n    createdAt: '2024-01-01T00:00:00Z',\n    updatedAt: '2024-01-01T00:00:00Z'\n  };\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      providers: [TutorialService]\n    });\n    service = TestBed.inject(TutorialService);\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n\n  afterEach(() => {\n    httpMock.verify();\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n\n  describe('getModules', () => {\n    it('should fetch all tutorial modules', () => {\n      const mockModules = [mockTutorialModule];\n\n      service.getModules().subscribe(modules => {\n        expect(modules).toEqual(mockModules);\n        expect(modules.length).toBe(1);\n        expect(modules[0].title).toBe('Getting Started');\n      });\n\n      const req = httpMock.expectOne('http://localhost:8080/api/tutorials/modules');\n      expect(req.request.method).toBe('GET');\n      req.flush(mockModules);\n    });\n\n    it('should handle error when fetching modules', () => {\n      service.getModules().subscribe({\n        next: () => fail('should have failed'),\n        error: (error) => {\n          expect(error.message).toBe('Server error - please try again later');\n        }\n      });\n\n      const req = httpMock.expectOne('http://localhost:8080/api/tutorials/modules');\n      req.flush('Server error', { status: 500, statusText: 'Internal Server Error' });\n    });\n  });\n\n  describe('getModule', () => {\n    it('should fetch a specific module by ID', () => {\n      const moduleId = 1;\n\n      service.getModule(moduleId).subscribe(module => {\n        expect(module).toEqual(mockTutorialModule);\n        expect(module.id).toBe(moduleId);\n      });\n\n      const req = httpMock.expectOne(`http://localhost:8080/api/tutorials/modules/${moduleId}`);\n      expect(req.request.method).toBe('GET');\n      req.flush(mockTutorialModule);\n    });\n\n    it('should handle 404 error for non-existent module', () => {\n      const moduleId = 999;\n\n      service.getModule(moduleId).subscribe({\n        next: () => fail('should have failed'),\n        error: (error) => {\n          expect(error.message).toBe('Tutorial content not found');\n        }\n      });\n\n      const req = httpMock.expectOne(`http://localhost:8080/api/tutorials/modules/${moduleId}`);\n      req.flush('Module not found', { status: 404, statusText: 'Not Found' });\n    });\n  });\n\n  describe('getModuleLessons', () => {\n    it('should fetch lessons for a specific module', () => {\n      const moduleId = 1;\n      const mockLessons = [mockTutorialLesson];\n\n      service.getModuleLessons(moduleId).subscribe(lessons => {\n        expect(lessons).toEqual(mockLessons);\n        expect(lessons.length).toBe(1);\n        expect(lessons[0].module.id).toBe(moduleId);\n      });\n\n      const req = httpMock.expectOne(`http://localhost:8080/api/tutorials/modules/${moduleId}/lessons`);\n      expect(req.request.method).toBe('GET');\n      req.flush(mockLessons);\n    });\n\n    it('should handle empty lessons array', () => {\n      const moduleId = 1;\n\n      service.getModuleLessons(moduleId).subscribe(lessons => {\n        expect(lessons).toEqual([]);\n        expect(lessons.length).toBe(0);\n      });\n\n      const req = httpMock.expectOne(`http://localhost:8080/api/tutorials/modules/${moduleId}/lessons`);\n      req.flush([]);\n    });\n  });\n\n  describe('getLesson', () => {\n    it('should fetch a specific lesson by ID', () => {\n      const lessonId = 1;\n\n      service.getLesson(lessonId).subscribe(lesson => {\n        expect(lesson).toEqual(mockTutorialLesson);\n        expect(lesson.id).toBe(lessonId);\n      });\n\n      const req = httpMock.expectOne(`http://localhost:8080/api/tutorials/lessons/${lessonId}`);\n      expect(req.request.method).toBe('GET');\n      req.flush(mockTutorialLesson);\n    });\n\n    it('should handle 404 error for non-existent lesson', () => {\n      const lessonId = 999;\n\n      service.getLesson(lessonId).subscribe({\n        next: () => fail('should have failed'),\n        error: (error) => {\n          expect(error.message).toContain('Tutorial content not found');\n        }\n      });\n\n      const req = httpMock.expectOne(`http://localhost:8080/api/tutorials/lessons/${lessonId}`);\n      req.flush('Lesson not found', { status: 404, statusText: 'Not Found' });\n    });\n  });\n\n  describe('error handling', () => {\n    it('should handle network errors', () => {\n      service.getModules().subscribe({\n        next: () => fail('should have failed'),\n        error: (error) => {\n          expect(error.message).toBe('Network error - please check your connection');\n        }\n      });\n\n      const req = httpMock.expectOne('http://localhost:8080/api/tutorials/modules');\n      req.error(new ErrorEvent('Network error'));\n    });\n\n    it('should handle server errors', () => {\n      service.getModules().subscribe({\n        next: () => fail('should have failed'),\n        error: (error) => {\n          expect(error.message).toBe('Server error - please try again later');\n        }\n      });\n\n      const req = httpMock.expectOne('http://localhost:8080/api/tutorials/modules');\n      req.flush('Server error', { status: 500, statusText: 'Internal Server Error' });\n    });\n\n    it('should throw error for invalid module ID', () => {\n      expect(() => service.getModule(0)).toThrowError('Invalid module ID');\n      expect(() => service.getModule(-1)).toThrowError('Invalid module ID');\n    });\n\n    it('should throw error for invalid lesson ID', () => {\n      expect(() => service.getLesson(0)).toThrowError('Invalid lesson ID');\n      expect(() => service.getLesson(-1)).toThrowError('Invalid lesson ID');\n    });\n  });\n});", "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { catchError, timeout, retry } from 'rxjs/operators';\nimport { TutorialModule, TutorialLesson } from '../models/tutorial.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TutorialService {\n  private readonly API_URL = 'http://localhost:8080/api/tutorials';\n  private readonly REQUEST_TIMEOUT = 10000; // 10 seconds\n\n  constructor(private http: HttpClient) {}\n\n  getModules(): Observable<TutorialModule[]> {\n    return this.http.get<TutorialModule[]>(`${this.API_URL}/modules`).pipe(\n      timeout(this.REQUEST_TIMEOUT),\n      retry(1),\n      catchError((error: HttpErrorResponse) => {\n        console.error('Error fetching tutorial modules:', error);\n        return this.handleError(error);\n      })\n    );\n  }\n\n  getModule(moduleId: number): Observable<TutorialModule> {\n    if (!moduleId || moduleId <= 0) {\n      throw new Error('Invalid module ID');\n    }\n\n    return this.http.get<TutorialModule>(`${this.API_URL}/modules/${moduleId}`).pipe(\n      timeout(this.REQUEST_TIMEOUT),\n      retry(1),\n      catchError((error: HttpErrorResponse) => {\n        console.error(`Error fetching tutorial module ${moduleId}:`, error);\n        return this.handleError(error);\n      })\n    );\n  }\n\n  getModuleLessons(moduleId: number): Observable<TutorialLesson[]> {\n    if (!moduleId || moduleId <= 0) {\n      throw new Error('Invalid module ID');\n    }\n\n    return this.http.get<TutorialLesson[]>(`${this.API_URL}/modules/${moduleId}/lessons`).pipe(\n      timeout(this.REQUEST_TIMEOUT),\n      retry(1),\n      catchError((error: HttpErrorResponse) => {\n        console.error(`Error fetching lessons for module ${moduleId}:`, error);\n        return this.handleError(error);\n      })\n    );\n  }\n\n  getLesson(lessonId: number): Observable<TutorialLesson> {\n    if (!lessonId || lessonId <= 0) {\n      throw new Error('Invalid lesson ID');\n    }\n\n    return this.http.get<TutorialLesson>(`${this.API_URL}/lessons/${lessonId}`).pipe(\n      timeout(this.REQUEST_TIMEOUT),\n      retry(1),\n      catchError((error: HttpErrorResponse) => {\n        console.error(`Error fetching tutorial lesson ${lessonId}:`, error);\n        return this.handleError(error);\n      })\n    );\n  }\n\n  private handleError(error: HttpErrorResponse): Observable<never> {\n    let errorMessage = 'An unexpected error occurred';\n    \n    if (error.status === 0) {\n      errorMessage = 'Network error - please check your connection';\n    } else if (error.status === 404) {\n      errorMessage = 'Tutorial content not found';\n    } else if (error.status >= 500) {\n      errorMessage = 'Server error - please try again later';\n    } else if (error.error && error.error.message) {\n      errorMessage = error.error.message;\n    }\n    \n    console.error('Tutorial Service Error:', {\n      status: error.status,\n      message: errorMessage,\n      url: error.url\n    });\n    \n    throw new Error(errorMessage);\n  }\n}"],
  "mappings": "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",
  "names": ["init_testing", "TutorialService"]
}
